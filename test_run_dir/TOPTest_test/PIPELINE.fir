;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit PIPELINE : 
  module PC : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : SInt<32>, out : SInt<32>}
    
    reg PC : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[PC.scala 11:21]
    io.out <= PC @[PC.scala 12:12]
    PC <= io.in @[PC.scala 13:8]
    
  module PC4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip pc : UInt<32>, out : UInt<32>}
    
    io.out <= UInt<1>("h00") @[PC4.scala 10:12]
    node _io_out_T = add(io.pc, UInt<32>("h04")) @[PC4.scala 12:21]
    node _io_out_T_1 = tail(_io_out_T, 1) @[PC4.scala 12:21]
    io.out <= _io_out_T_1 @[PC4.scala 12:12]
    
  module InstMem : 
    input clock : Clock
    input reset : Reset
    output io : {flip addr : UInt<32>, data : UInt<32>}
    
    cmem imem : UInt<32>[1024] @[INSTRmem.scala 17:16]
    node _io_data_T = bits(io.addr, 9, 0) @[INSTRmem.scala 20:17]
    infer mport io_data_MPORT = imem[_io_data_T], clock @[INSTRmem.scala 20:17]
    io.data <= io_data_MPORT @[INSTRmem.scala 20:9]
    
  module Control : 
    input clock : Clock
    input reset : Reset
    output io : {flip opcode : UInt<7>, mem_write : UInt<1>, branch : UInt<1>, mem_read : UInt<1>, reg_write : UInt<1>, men_to_reg : UInt<1>, alu_operation : UInt<3>, operand_A : UInt<2>, operand_B : UInt<1>, extend : UInt<2>, next_pc_sel : UInt<2>}
    
    io.mem_write <= UInt<1>("h00") @[CONTROL.scala 23:16]
    io.branch <= UInt<1>("h00") @[CONTROL.scala 24:13]
    io.mem_read <= UInt<1>("h00") @[CONTROL.scala 25:15]
    io.reg_write <= UInt<1>("h00") @[CONTROL.scala 26:16]
    io.men_to_reg <= UInt<1>("h00") @[CONTROL.scala 27:17]
    io.alu_operation <= UInt<1>("h00") @[CONTROL.scala 28:20]
    io.operand_A <= UInt<1>("h00") @[CONTROL.scala 29:16]
    io.operand_B <= UInt<1>("h00") @[CONTROL.scala 30:16]
    io.extend <= UInt<1>("h00") @[CONTROL.scala 31:13]
    io.next_pc_sel <= UInt<1>("h00") @[CONTROL.scala 32:18]
    node _T = eq(UInt<6>("h033"), io.opcode) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      io.mem_write <= UInt<1>("h00") @[CONTROL.scala 37:20]
      io.branch <= UInt<1>("h00") @[CONTROL.scala 38:17]
      io.mem_read <= UInt<1>("h00") @[CONTROL.scala 39:19]
      io.reg_write <= UInt<1>("h01") @[CONTROL.scala 40:20]
      io.men_to_reg <= UInt<1>("h00") @[CONTROL.scala 41:21]
      io.alu_operation <= UInt<1>("h00") @[CONTROL.scala 42:24]
      io.operand_A <= UInt<1>("h00") @[CONTROL.scala 43:20]
      io.operand_B <= UInt<1>("h00") @[CONTROL.scala 44:20]
      io.extend <= UInt<1>("h00") @[CONTROL.scala 45:17]
      io.next_pc_sel <= UInt<1>("h00") @[CONTROL.scala 46:22]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<5>("h013"), io.opcode) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        io.mem_write <= UInt<1>("h00") @[CONTROL.scala 51:20]
        io.branch <= UInt<1>("h00") @[CONTROL.scala 52:17]
        io.mem_read <= UInt<1>("h00") @[CONTROL.scala 53:19]
        io.reg_write <= UInt<1>("h01") @[CONTROL.scala 54:20]
        io.men_to_reg <= UInt<1>("h00") @[CONTROL.scala 55:21]
        io.alu_operation <= UInt<1>("h01") @[CONTROL.scala 56:24]
        io.operand_A <= UInt<1>("h00") @[CONTROL.scala 57:20]
        io.operand_B <= UInt<1>("h01") @[CONTROL.scala 58:20]
        io.extend <= UInt<1>("h00") @[CONTROL.scala 59:17]
        io.next_pc_sel <= UInt<1>("h00") @[CONTROL.scala 60:22]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<6>("h023"), io.opcode) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          io.mem_write <= UInt<1>("h01") @[CONTROL.scala 65:20]
          io.branch <= UInt<1>("h00") @[CONTROL.scala 66:17]
          io.mem_read <= UInt<1>("h00") @[CONTROL.scala 67:19]
          io.reg_write <= UInt<1>("h00") @[CONTROL.scala 68:20]
          io.men_to_reg <= UInt<1>("h00") @[CONTROL.scala 69:21]
          io.alu_operation <= UInt<3>("h05") @[CONTROL.scala 70:24]
          io.operand_A <= UInt<1>("h00") @[CONTROL.scala 71:20]
          io.operand_B <= UInt<1>("h01") @[CONTROL.scala 72:20]
          io.extend <= UInt<1>("h01") @[CONTROL.scala 73:17]
          io.next_pc_sel <= UInt<1>("h00") @[CONTROL.scala 74:22]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<2>("h03"), io.opcode) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            io.mem_write <= UInt<1>("h00") @[CONTROL.scala 79:20]
            io.branch <= UInt<1>("h00") @[CONTROL.scala 80:17]
            io.mem_read <= UInt<1>("h01") @[CONTROL.scala 81:19]
            io.reg_write <= UInt<1>("h01") @[CONTROL.scala 82:20]
            io.men_to_reg <= UInt<1>("h01") @[CONTROL.scala 83:21]
            io.alu_operation <= UInt<3>("h04") @[CONTROL.scala 84:24]
            io.operand_A <= UInt<1>("h00") @[CONTROL.scala 85:20]
            io.operand_B <= UInt<1>("h01") @[CONTROL.scala 86:20]
            io.extend <= UInt<1>("h00") @[CONTROL.scala 87:17]
            io.next_pc_sel <= UInt<1>("h00") @[CONTROL.scala 88:22]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_4 = eq(UInt<7>("h063"), io.opcode) @[Conditional.scala 37:30]
            when _T_4 : @[Conditional.scala 39:67]
              io.mem_write <= UInt<1>("h00") @[CONTROL.scala 93:20]
              io.branch <= UInt<1>("h01") @[CONTROL.scala 94:17]
              io.mem_read <= UInt<1>("h00") @[CONTROL.scala 95:19]
              io.reg_write <= UInt<1>("h00") @[CONTROL.scala 96:20]
              io.men_to_reg <= UInt<1>("h00") @[CONTROL.scala 97:21]
              io.alu_operation <= UInt<2>("h02") @[CONTROL.scala 98:24]
              io.operand_A <= UInt<1>("h00") @[CONTROL.scala 99:20]
              io.operand_B <= UInt<1>("h00") @[CONTROL.scala 100:20]
              io.extend <= UInt<1>("h00") @[CONTROL.scala 101:17]
              io.next_pc_sel <= UInt<1>("h01") @[CONTROL.scala 102:22]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_5 = eq(UInt<7>("h06f"), io.opcode) @[Conditional.scala 37:30]
              when _T_5 : @[Conditional.scala 39:67]
                io.mem_write <= UInt<1>("h00") @[CONTROL.scala 107:20]
                io.branch <= UInt<1>("h00") @[CONTROL.scala 108:17]
                io.mem_read <= UInt<1>("h00") @[CONTROL.scala 109:19]
                io.reg_write <= UInt<1>("h01") @[CONTROL.scala 110:20]
                io.men_to_reg <= UInt<1>("h00") @[CONTROL.scala 111:21]
                io.alu_operation <= UInt<2>("h03") @[CONTROL.scala 112:24]
                io.operand_A <= UInt<1>("h01") @[CONTROL.scala 113:20]
                io.operand_B <= UInt<1>("h00") @[CONTROL.scala 114:20]
                io.extend <= UInt<1>("h00") @[CONTROL.scala 115:17]
                io.next_pc_sel <= UInt<2>("h02") @[CONTROL.scala 116:22]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_6 = eq(UInt<7>("h067"), io.opcode) @[Conditional.scala 37:30]
                when _T_6 : @[Conditional.scala 39:67]
                  io.mem_write <= UInt<1>("h00") @[CONTROL.scala 121:20]
                  io.branch <= UInt<1>("h00") @[CONTROL.scala 122:17]
                  io.mem_read <= UInt<1>("h00") @[CONTROL.scala 123:19]
                  io.reg_write <= UInt<1>("h01") @[CONTROL.scala 124:20]
                  io.men_to_reg <= UInt<1>("h00") @[CONTROL.scala 125:21]
                  io.alu_operation <= UInt<2>("h03") @[CONTROL.scala 126:24]
                  io.operand_A <= UInt<1>("h01") @[CONTROL.scala 127:20]
                  io.operand_B <= UInt<1>("h00") @[CONTROL.scala 128:20]
                  io.extend <= UInt<1>("h00") @[CONTROL.scala 129:17]
                  io.next_pc_sel <= UInt<2>("h03") @[CONTROL.scala 130:22]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_7 = eq(UInt<6>("h037"), io.opcode) @[Conditional.scala 37:30]
                  when _T_7 : @[Conditional.scala 39:67]
                    io.mem_write <= UInt<1>("h00") @[CONTROL.scala 135:20]
                    io.branch <= UInt<1>("h00") @[CONTROL.scala 136:17]
                    io.mem_read <= UInt<1>("h00") @[CONTROL.scala 137:19]
                    io.reg_write <= UInt<1>("h01") @[CONTROL.scala 138:20]
                    io.men_to_reg <= UInt<1>("h00") @[CONTROL.scala 139:21]
                    io.alu_operation <= UInt<3>("h06") @[CONTROL.scala 140:24]
                    io.operand_A <= UInt<2>("h03") @[CONTROL.scala 141:20]
                    io.operand_B <= UInt<1>("h01") @[CONTROL.scala 142:20]
                    io.extend <= UInt<2>("h02") @[CONTROL.scala 143:17]
                    io.next_pc_sel <= UInt<1>("h00") @[CONTROL.scala 144:22]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_8 = eq(UInt<5>("h017"), io.opcode) @[Conditional.scala 37:30]
                    when _T_8 : @[Conditional.scala 39:67]
                      io.mem_write <= UInt<1>("h00") @[CONTROL.scala 149:20]
                      io.branch <= UInt<1>("h00") @[CONTROL.scala 150:17]
                      io.mem_read <= UInt<1>("h00") @[CONTROL.scala 151:19]
                      io.reg_write <= UInt<1>("h01") @[CONTROL.scala 152:20]
                      io.men_to_reg <= UInt<1>("h00") @[CONTROL.scala 153:21]
                      io.alu_operation <= UInt<3>("h07") @[CONTROL.scala 154:24]
                      io.operand_A <= UInt<2>("h02") @[CONTROL.scala 155:20]
                      io.operand_B <= UInt<1>("h01") @[CONTROL.scala 156:20]
                      io.extend <= UInt<2>("h02") @[CONTROL.scala 157:17]
                      io.next_pc_sel <= UInt<1>("h00") @[CONTROL.scala 158:22]
                      skip @[Conditional.scala 39:67]
    
  module ImmGenerator : 
    input clock : Clock
    input reset : Reset
    output io : {flip instr : UInt<32>, flip pc : UInt<32>, I_type : SInt<32>, S_type : SInt<32>, SB_type : SInt<32>, U_type : SInt<32>, UJ_type : SInt<32>}
    
    node _io_I_type_T = bits(io.instr, 31, 31) @[ImmGenerator.scala 18:37]
    node _io_I_type_T_1 = bits(_io_I_type_T, 0, 0) @[Bitwise.scala 72:15]
    node io_I_type_hi = mux(_io_I_type_T_1, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node io_I_type_lo = bits(io.instr, 31, 20) @[ImmGenerator.scala 18:52]
    node _io_I_type_T_2 = cat(io_I_type_hi, io_I_type_lo) @[Cat.scala 30:58]
    node _io_I_type_T_3 = asSInt(_io_I_type_T_2) @[ImmGenerator.scala 18:62]
    io.I_type <= _io_I_type_T_3 @[ImmGenerator.scala 18:13]
    node _io_S_type_T = bits(io.instr, 31, 31) @[ImmGenerator.scala 21:37]
    node _io_S_type_T_1 = bits(_io_S_type_T, 0, 0) @[Bitwise.scala 72:15]
    node io_S_type_hi_hi = mux(_io_S_type_T_1, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node io_S_type_hi_lo = bits(io.instr, 31, 25) @[ImmGenerator.scala 21:52]
    node io_S_type_lo = bits(io.instr, 11, 7) @[ImmGenerator.scala 21:70]
    node io_S_type_hi = cat(io_S_type_hi_hi, io_S_type_hi_lo) @[Cat.scala 30:58]
    node _io_S_type_T_2 = cat(io_S_type_hi, io_S_type_lo) @[Cat.scala 30:58]
    node _io_S_type_T_3 = asSInt(_io_S_type_T_2) @[ImmGenerator.scala 21:79]
    io.S_type <= _io_S_type_T_3 @[ImmGenerator.scala 21:13]
    node _sbImm_T = bits(io.instr, 31, 31) @[ImmGenerator.scala 24:36]
    node _sbImm_T_1 = bits(_sbImm_T, 0, 0) @[Bitwise.scala 72:15]
    node sbImm_hi_hi_hi = mux(_sbImm_T_1, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
    node sbImm_hi_hi_lo = bits(io.instr, 31, 31) @[ImmGenerator.scala 24:51]
    node sbImm_hi_lo = bits(io.instr, 7, 7) @[ImmGenerator.scala 24:65]
    node sbImm_lo_hi_hi = bits(io.instr, 30, 25) @[ImmGenerator.scala 24:78]
    node sbImm_lo_hi_lo = bits(io.instr, 11, 8) @[ImmGenerator.scala 24:96]
    node sbImm_lo_hi = cat(sbImm_lo_hi_hi, sbImm_lo_hi_lo) @[Cat.scala 30:58]
    node sbImm_lo = cat(sbImm_lo_hi, UInt<1>("h00")) @[Cat.scala 30:58]
    node sbImm_hi_hi = cat(sbImm_hi_hi_hi, sbImm_hi_hi_lo) @[Cat.scala 30:58]
    node sbImm_hi = cat(sbImm_hi_hi, sbImm_hi_lo) @[Cat.scala 30:58]
    node _sbImm_T_2 = cat(sbImm_hi, sbImm_lo) @[Cat.scala 30:58]
    node sbImm = asSInt(_sbImm_T_2) @[ImmGenerator.scala 24:115]
    node _io_SB_type_T = asSInt(io.pc) @[ImmGenerator.scala 25:31]
    node _io_SB_type_T_1 = add(sbImm, _io_SB_type_T) @[ImmGenerator.scala 25:23]
    node _io_SB_type_T_2 = tail(_io_SB_type_T_1, 1) @[ImmGenerator.scala 25:23]
    node _io_SB_type_T_3 = asSInt(_io_SB_type_T_2) @[ImmGenerator.scala 25:23]
    io.SB_type <= _io_SB_type_T_3 @[ImmGenerator.scala 25:14]
    node io_U_type_hi = bits(io.instr, 31, 12) @[ImmGenerator.scala 28:28]
    node io_U_type_lo = mux(UInt<1>("h00"), UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
    node _io_U_type_T = cat(io_U_type_hi, io_U_type_lo) @[Cat.scala 30:58]
    node _io_U_type_T_1 = asSInt(_io_U_type_T) @[ImmGenerator.scala 28:53]
    io.U_type <= _io_U_type_T_1 @[ImmGenerator.scala 28:13]
    node _ujImm_T = bits(io.instr, 31, 31) @[ImmGenerator.scala 31:36]
    node _ujImm_T_1 = bits(_ujImm_T, 0, 0) @[Bitwise.scala 72:15]
    node ujImm_hi_hi_hi = mux(_ujImm_T_1, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
    node ujImm_hi_hi_lo = bits(io.instr, 31, 31) @[ImmGenerator.scala 31:51]
    node ujImm_hi_lo = bits(io.instr, 19, 12) @[ImmGenerator.scala 31:65]
    node ujImm_lo_hi_hi = bits(io.instr, 20, 20) @[ImmGenerator.scala 31:83]
    node ujImm_lo_hi_lo = bits(io.instr, 30, 21) @[ImmGenerator.scala 31:97]
    node ujImm_lo_hi = cat(ujImm_lo_hi_hi, ujImm_lo_hi_lo) @[Cat.scala 30:58]
    node ujImm_lo = cat(ujImm_lo_hi, UInt<1>("h00")) @[Cat.scala 30:58]
    node ujImm_hi_hi = cat(ujImm_hi_hi_hi, ujImm_hi_hi_lo) @[Cat.scala 30:58]
    node ujImm_hi = cat(ujImm_hi_hi, ujImm_hi_lo) @[Cat.scala 30:58]
    node _ujImm_T_2 = cat(ujImm_hi, ujImm_lo) @[Cat.scala 30:58]
    node ujImm = asSInt(_ujImm_T_2) @[ImmGenerator.scala 31:117]
    node _io_UJ_type_T = asSInt(io.pc) @[ImmGenerator.scala 32:31]
    node _io_UJ_type_T_1 = add(ujImm, _io_UJ_type_T) @[ImmGenerator.scala 32:23]
    node _io_UJ_type_T_2 = tail(_io_UJ_type_T_1, 1) @[ImmGenerator.scala 32:23]
    node _io_UJ_type_T_3 = asSInt(_io_UJ_type_T_2) @[ImmGenerator.scala 32:23]
    io.UJ_type <= _io_UJ_type_T_3 @[ImmGenerator.scala 32:14]
    
  module RegisterFile : 
    input clock : Clock
    input reset : Reset
    output io : {flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip reg_write : UInt<1>, flip w_reg : UInt<5>, flip w_data : SInt<32>, rdata1 : SInt<32>, rdata2 : SInt<32>}
    
    wire _regfile_WIRE : SInt<32>[32] @[RegisterFile.scala 15:32]
    _regfile_WIRE[0] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[1] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[2] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[3] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[4] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[5] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[6] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[7] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[8] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[9] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[10] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[11] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[12] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[13] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[14] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[15] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[16] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[17] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[18] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[19] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[20] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[21] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[22] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[23] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[24] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[25] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[26] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[27] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[28] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[29] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[30] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[31] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    reg regfile : SInt<32>[32], clock with : (reset => (reset, _regfile_WIRE)) @[RegisterFile.scala 15:24]
    node _io_rdata1_T = eq(io.rs1, UInt<1>("h00")) @[RegisterFile.scala 17:27]
    node _io_rdata1_T_1 = mux(_io_rdata1_T, asSInt(UInt<1>("h00")), regfile[io.rs1]) @[RegisterFile.scala 17:19]
    io.rdata1 <= _io_rdata1_T_1 @[RegisterFile.scala 17:13]
    node _io_rdata2_T = eq(io.rs2, UInt<1>("h00")) @[RegisterFile.scala 18:27]
    node _io_rdata2_T_1 = mux(_io_rdata2_T, asSInt(UInt<1>("h00")), regfile[io.rs2]) @[RegisterFile.scala 18:19]
    io.rdata2 <= _io_rdata2_T_1 @[RegisterFile.scala 18:13]
    node _T = neq(io.w_reg, UInt<1>("h00")) @[RegisterFile.scala 20:33]
    node _T_1 = and(io.reg_write, _T) @[RegisterFile.scala 20:21]
    when _T_1 : @[RegisterFile.scala 20:42]
      regfile[io.w_reg] <= io.w_data @[RegisterFile.scala 21:23]
      skip @[RegisterFile.scala 20:42]
    
  module AluControl : 
    input clock : Clock
    input reset : Reset
    output io : {flip func3 : UInt<3>, flip func7 : UInt<1>, flip aluOp : UInt<3>, out : UInt<5>}
    
    io.out <= UInt<1>("h00") @[Alu_Control.scala 13:10]
    node _T = eq(io.aluOp, UInt<1>("h00")) @[Alu_Control.scala 16:17]
    when _T : @[Alu_Control.scala 16:26]
      node io_out_hi = cat(UInt<2>("h00"), io.func7) @[Cat.scala 30:58]
      node _io_out_T = cat(io_out_hi, io.func3) @[Cat.scala 30:58]
      io.out <= _io_out_T @[Alu_Control.scala 17:12]
      skip @[Alu_Control.scala 16:26]
    else : @[Alu_Control.scala 20:32]
      node _T_1 = eq(io.aluOp, UInt<1>("h01")) @[Alu_Control.scala 20:23]
      when _T_1 : @[Alu_Control.scala 20:32]
        node _io_out_T_1 = cat(UInt<2>("h00"), io.func3) @[Cat.scala 30:58]
        io.out <= _io_out_T_1 @[Alu_Control.scala 21:12]
        skip @[Alu_Control.scala 20:32]
      else : @[Alu_Control.scala 24:32]
        node _T_2 = eq(io.aluOp, UInt<2>("h02")) @[Alu_Control.scala 24:23]
        when _T_2 : @[Alu_Control.scala 24:32]
          node _io_out_T_2 = cat(UInt<3>("h02"), io.func3) @[Cat.scala 30:58]
          io.out <= _io_out_T_2 @[Alu_Control.scala 25:12]
          skip @[Alu_Control.scala 24:32]
        else : @[Alu_Control.scala 28:32]
          node _T_3 = eq(io.aluOp, UInt<2>("h03")) @[Alu_Control.scala 28:23]
          when _T_3 : @[Alu_Control.scala 28:32]
            io.out <= UInt<5>("h01f") @[Alu_Control.scala 29:12]
            skip @[Alu_Control.scala 28:32]
          else : @[Alu_Control.scala 32:92]
            node _T_4 = eq(io.aluOp, UInt<3>("h04")) @[Alu_Control.scala 32:23]
            node _T_5 = eq(io.aluOp, UInt<3>("h05")) @[Alu_Control.scala 32:43]
            node _T_6 = or(_T_4, _T_5) @[Alu_Control.scala 32:31]
            node _T_7 = eq(io.aluOp, UInt<3>("h06")) @[Alu_Control.scala 32:63]
            node _T_8 = or(_T_6, _T_7) @[Alu_Control.scala 32:51]
            node _T_9 = eq(io.aluOp, UInt<3>("h07")) @[Alu_Control.scala 32:83]
            node _T_10 = or(_T_8, _T_9) @[Alu_Control.scala 32:71]
            when _T_10 : @[Alu_Control.scala 32:92]
              io.out <= UInt<1>("h00") @[Alu_Control.scala 33:12]
              skip @[Alu_Control.scala 32:92]
            else : @[Alu_Control.scala 35:16]
              io.out <= UInt<1>("h00") @[Alu_Control.scala 36:12]
              skip @[Alu_Control.scala 35:16]
    
  module ALU : 
    input clock : Clock
    input reset : Reset
    output io : {flip in_A : SInt<32>, flip in_B : SInt<32>, flip alu_Op : UInt<5>, out : SInt<32>}
    
    wire result : SInt<32>
    result <= asSInt(UInt<32>("h00"))
    node _T = eq(UInt<5>("h00"), io.alu_Op) @[Conditional.scala 37:30]
    node _T_1 = eq(UInt<5>("h00"), io.alu_Op) @[Conditional.scala 37:30]
    node _T_2 = eq(UInt<5>("h00"), io.alu_Op) @[Conditional.scala 37:30]
    node _T_3 = eq(UInt<5>("h00"), io.alu_Op) @[Conditional.scala 37:30]
    node _T_4 = eq(UInt<5>("h00"), io.alu_Op) @[Conditional.scala 37:30]
    node _T_5 = eq(UInt<5>("h00"), io.alu_Op) @[Conditional.scala 37:30]
    node _T_6 = or(_T, _T_1) @[Conditional.scala 37:55]
    node _T_7 = or(_T_6, _T_2) @[Conditional.scala 37:55]
    node _T_8 = or(_T_7, _T_3) @[Conditional.scala 37:55]
    node _T_9 = or(_T_8, _T_4) @[Conditional.scala 37:55]
    node _T_10 = or(_T_9, _T_5) @[Conditional.scala 37:55]
    when _T_10 : @[Conditional.scala 40:58]
      node _result_T = add(io.in_A, io.in_B) @[Alu.scala 45:25]
      node _result_T_1 = tail(_result_T, 1) @[Alu.scala 45:25]
      node _result_T_2 = asSInt(_result_T_1) @[Alu.scala 45:25]
      result <= _result_T_2 @[Alu.scala 45:14]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_11 = eq(UInt<5>("h01"), io.alu_Op) @[Conditional.scala 37:30]
      node _T_12 = eq(UInt<5>("h01"), io.alu_Op) @[Conditional.scala 37:30]
      node _T_13 = or(_T_11, _T_12) @[Conditional.scala 37:55]
      when _T_13 : @[Conditional.scala 39:67]
        node _result_T_3 = asUInt(io.in_A) @[Alu.scala 48:26]
        node _result_T_4 = bits(io.in_B, 4, 0) @[Alu.scala 48:43]
        node _result_T_5 = dshl(_result_T_3, _result_T_4) @[Alu.scala 48:33]
        node _result_T_6 = asSInt(_result_T_5) @[Alu.scala 48:51]
        result <= _result_T_6 @[Alu.scala 48:14]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_14 = eq(UInt<5>("h02"), io.alu_Op) @[Conditional.scala 37:30]
        node _T_15 = eq(UInt<5>("h02"), io.alu_Op) @[Conditional.scala 37:30]
        node _T_16 = or(_T_14, _T_15) @[Conditional.scala 37:55]
        when _T_16 : @[Conditional.scala 39:67]
          node _result_T_7 = lt(io.in_A, io.in_B) @[Alu.scala 51:29]
          node _result_T_8 = mux(_result_T_7, asSInt(UInt<2>("h01")), asSInt(UInt<1>("h00"))) @[Alu.scala 51:20]
          result <= _result_T_8 @[Alu.scala 51:14]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_17 = eq(UInt<5>("h03"), io.alu_Op) @[Conditional.scala 37:30]
          node _T_18 = eq(UInt<5>("h03"), io.alu_Op) @[Conditional.scala 37:30]
          node _T_19 = or(_T_17, _T_18) @[Conditional.scala 37:55]
          when _T_19 : @[Conditional.scala 39:67]
            node _result_T_9 = asUInt(io.in_A) @[Alu.scala 54:29]
            node _result_T_10 = asUInt(io.in_B) @[Alu.scala 54:46]
            node _result_T_11 = lt(_result_T_9, _result_T_10) @[Alu.scala 54:36]
            node _result_T_12 = mux(_result_T_11, asSInt(UInt<2>("h01")), asSInt(UInt<1>("h00"))) @[Alu.scala 54:20]
            result <= _result_T_12 @[Alu.scala 54:14]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_20 = eq(UInt<5>("h04"), io.alu_Op) @[Conditional.scala 37:30]
            node _T_21 = eq(UInt<5>("h04"), io.alu_Op) @[Conditional.scala 37:30]
            node _T_22 = or(_T_20, _T_21) @[Conditional.scala 37:55]
            when _T_22 : @[Conditional.scala 39:67]
              node _result_T_13 = xor(io.in_A, io.in_B) @[Alu.scala 57:25]
              node _result_T_14 = asSInt(_result_T_13) @[Alu.scala 57:25]
              result <= _result_T_14 @[Alu.scala 57:14]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_23 = eq(UInt<5>("h05"), io.alu_Op) @[Conditional.scala 37:30]
              node _T_24 = eq(UInt<5>("h05"), io.alu_Op) @[Conditional.scala 37:30]
              node _T_25 = or(_T_23, _T_24) @[Conditional.scala 37:55]
              when _T_25 : @[Conditional.scala 39:67]
                node _result_T_15 = asUInt(io.in_A) @[Alu.scala 60:26]
                node _result_T_16 = bits(io.in_B, 4, 0) @[Alu.scala 60:43]
                node _result_T_17 = dshr(_result_T_15, _result_T_16) @[Alu.scala 60:33]
                node _result_T_18 = asSInt(_result_T_17) @[Alu.scala 60:51]
                result <= _result_T_18 @[Alu.scala 60:14]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_26 = eq(UInt<5>("h06"), io.alu_Op) @[Conditional.scala 37:30]
                node _T_27 = eq(UInt<5>("h06"), io.alu_Op) @[Conditional.scala 37:30]
                node _T_28 = or(_T_26, _T_27) @[Conditional.scala 37:55]
                when _T_28 : @[Conditional.scala 39:67]
                  node _result_T_19 = or(io.in_A, io.in_B) @[Alu.scala 63:25]
                  node _result_T_20 = asSInt(_result_T_19) @[Alu.scala 63:25]
                  result <= _result_T_20 @[Alu.scala 63:14]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_29 = eq(UInt<5>("h07"), io.alu_Op) @[Conditional.scala 37:30]
                  node _T_30 = eq(UInt<5>("h07"), io.alu_Op) @[Conditional.scala 37:30]
                  node _T_31 = or(_T_29, _T_30) @[Conditional.scala 37:55]
                  when _T_31 : @[Conditional.scala 39:67]
                    node _result_T_21 = and(io.in_A, io.in_B) @[Alu.scala 66:25]
                    node _result_T_22 = asSInt(_result_T_21) @[Alu.scala 66:25]
                    result <= _result_T_22 @[Alu.scala 66:14]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_32 = eq(UInt<5>("h08"), io.alu_Op) @[Conditional.scala 37:30]
                    when _T_32 : @[Conditional.scala 39:67]
                      node _result_T_23 = sub(io.in_A, io.in_B) @[Alu.scala 69:25]
                      node _result_T_24 = tail(_result_T_23, 1) @[Alu.scala 69:25]
                      node _result_T_25 = asSInt(_result_T_24) @[Alu.scala 69:25]
                      result <= _result_T_25 @[Alu.scala 69:14]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_33 = eq(UInt<5>("h0d"), io.alu_Op) @[Conditional.scala 37:30]
                      node _T_34 = eq(UInt<5>("h0d"), io.alu_Op) @[Conditional.scala 37:30]
                      node _T_35 = or(_T_33, _T_34) @[Conditional.scala 37:55]
                      when _T_35 : @[Conditional.scala 39:67]
                        node _result_T_26 = bits(io.in_B, 4, 0) @[Alu.scala 72:36]
                        node _result_T_27 = dshr(io.in_A, _result_T_26) @[Alu.scala 72:26]
                        result <= _result_T_27 @[Alu.scala 72:14]
                        skip @[Conditional.scala 39:67]
                      else : @[Conditional.scala 39:67]
                        node _T_36 = eq(UInt<5>("h01f"), io.alu_Op) @[Conditional.scala 37:30]
                        node _T_37 = eq(UInt<5>("h01f"), io.alu_Op) @[Conditional.scala 37:30]
                        node _T_38 = or(_T_36, _T_37) @[Conditional.scala 37:55]
                        when _T_38 : @[Conditional.scala 39:67]
                          result <= io.in_A @[Alu.scala 75:14]
                          skip @[Conditional.scala 39:67]
    io.out <= result @[Alu.scala 79:10]
    
  module Branch : 
    input clock : Clock
    input reset : Reset
    output io : {flip fnct3 : UInt<3>, flip branch : UInt<1>, flip arg_x : SInt<32>, flip arg_y : SInt<32>, br_taken : UInt<1>}
    
    io.br_taken <= UInt<1>("h00") @[BRANCH.scala 13:15]
    when io.branch : @[BRANCH.scala 15:19]
      node _T = eq(io.fnct3, UInt<1>("h00")) @[BRANCH.scala 17:19]
      when _T : @[BRANCH.scala 17:28]
        node _io_br_taken_T = eq(io.arg_x, io.arg_y) @[BRANCH.scala 18:31]
        io.br_taken <= _io_br_taken_T @[BRANCH.scala 18:19]
        skip @[BRANCH.scala 17:28]
      else : @[BRANCH.scala 21:33]
        node _T_1 = eq(io.fnct3, UInt<1>("h01")) @[BRANCH.scala 21:24]
        when _T_1 : @[BRANCH.scala 21:33]
          node _io_br_taken_T_1 = neq(io.arg_x, io.arg_y) @[BRANCH.scala 22:31]
          io.br_taken <= _io_br_taken_T_1 @[BRANCH.scala 22:19]
          skip @[BRANCH.scala 21:33]
        else : @[BRANCH.scala 25:33]
          node _T_2 = eq(io.fnct3, UInt<3>("h04")) @[BRANCH.scala 25:24]
          when _T_2 : @[BRANCH.scala 25:33]
            node _io_br_taken_T_2 = lt(io.arg_x, io.arg_y) @[BRANCH.scala 26:31]
            io.br_taken <= _io_br_taken_T_2 @[BRANCH.scala 26:19]
            skip @[BRANCH.scala 25:33]
          else : @[BRANCH.scala 29:33]
            node _T_3 = eq(io.fnct3, UInt<3>("h05")) @[BRANCH.scala 29:24]
            when _T_3 : @[BRANCH.scala 29:33]
              node _io_br_taken_T_3 = geq(io.arg_x, io.arg_y) @[BRANCH.scala 30:31]
              io.br_taken <= _io_br_taken_T_3 @[BRANCH.scala 30:19]
              skip @[BRANCH.scala 29:33]
            else : @[BRANCH.scala 33:33]
              node _T_4 = eq(io.fnct3, UInt<3>("h06")) @[BRANCH.scala 33:24]
              when _T_4 : @[BRANCH.scala 33:33]
                node _io_br_taken_T_4 = asUInt(io.arg_x) @[BRANCH.scala 34:31]
                node _io_br_taken_T_5 = asUInt(io.arg_y) @[BRANCH.scala 34:49]
                node _io_br_taken_T_6 = lt(_io_br_taken_T_4, _io_br_taken_T_5) @[BRANCH.scala 34:38]
                io.br_taken <= _io_br_taken_T_6 @[BRANCH.scala 34:19]
                skip @[BRANCH.scala 33:33]
              else : @[BRANCH.scala 37:33]
                node _T_5 = eq(io.fnct3, UInt<3>("h07")) @[BRANCH.scala 37:24]
                when _T_5 : @[BRANCH.scala 37:33]
                  node _io_br_taken_T_7 = asUInt(io.arg_x) @[BRANCH.scala 38:31]
                  node _io_br_taken_T_8 = asUInt(io.arg_y) @[BRANCH.scala 38:50]
                  node _io_br_taken_T_9 = geq(_io_br_taken_T_7, _io_br_taken_T_8) @[BRANCH.scala 38:38]
                  io.br_taken <= _io_br_taken_T_9 @[BRANCH.scala 38:19]
                  skip @[BRANCH.scala 37:33]
      skip @[BRANCH.scala 15:19]
    
  module DataMem1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip addr : UInt<32>, flip dataIn : SInt<32>, flip mem_read : UInt<1>, flip mem_write : UInt<1>, dataOut : SInt<32>}
    
    cmem imem1 : SInt<32>[1024] @[DATAmem.scala 13:17]
    io.dataOut <= asSInt(UInt<1>("h00")) @[DATAmem.scala 15:12]
    node _T = eq(io.mem_write, UInt<1>("h01")) @[DATAmem.scala 17:21]
    when _T : @[DATAmem.scala 17:30]
      node _T_1 = bits(io.addr, 9, 0)
      write mport MPORT = imem1[_T_1], clock
      MPORT <= io.dataIn
      skip @[DATAmem.scala 17:30]
    node _T_2 = eq(io.mem_read, UInt<1>("h01")) @[DATAmem.scala 21:20]
    when _T_2 : @[DATAmem.scala 21:30]
      node _io_dataOut_T = bits(io.addr, 9, 0) @[DATAmem.scala 22:30]
      read mport io_dataOut_MPORT = imem1[_io_dataOut_T], clock @[DATAmem.scala 22:30]
      io.dataOut <= io_dataOut_MPORT @[DATAmem.scala 22:16]
      skip @[DATAmem.scala 21:30]
    
  module Jalr : 
    input clock : Clock
    input reset : Reset
    output io : {flip imme : UInt<32>, flip rdata1 : UInt<32>, out : UInt<32>}
    
    node _computedAddr_T = add(io.imme, io.rdata1) @[JALR.scala 12:30]
    node computedAddr = tail(_computedAddr_T, 1) @[JALR.scala 12:30]
    node _io_out_T = and(computedAddr, UInt<32>("h0fffffffe")) @[JALR.scala 15:26]
    io.out <= _io_out_T @[JALR.scala 15:10]
    
  module IF_ID : 
    input clock : Clock
    input reset : Reset
    output io : {flip pc_in : SInt<32>, flip pc4_in : UInt<32>, flip mux_f_pc_in : SInt<32>, flip mux_g_inst_in : UInt<32>, pc_out : SInt<32>, pc4_out : UInt<32>, mux_f_pc_out : SInt<32>, mux_g_inst_out : UInt<32>}
    
    reg pc_in_reg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[IFI_D.scala 19:25]
    reg pc4_reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IFI_D.scala 20:23]
    reg mux_f_reg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[IFI_D.scala 21:25]
    reg mux_g_reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IFI_D.scala 22:25]
    pc_in_reg <= io.pc_in @[IFI_D.scala 24:11]
    pc4_reg <= io.pc4_in @[IFI_D.scala 25:9]
    mux_f_reg <= io.mux_f_pc_in @[IFI_D.scala 26:11]
    mux_g_reg <= io.mux_g_inst_in @[IFI_D.scala 27:11]
    io.pc_out <= pc_in_reg @[IFI_D.scala 29:11]
    io.pc4_out <= pc4_reg @[IFI_D.scala 30:12]
    io.mux_f_pc_out <= mux_f_reg @[IFI_D.scala 31:17]
    io.mux_g_inst_out <= mux_g_reg @[IFI_D.scala 32:19]
    
  module ID_EX : 
    input clock : Clock
    input reset : Reset
    output io : {flip rs1_in : UInt<5>, flip rs2_in : UInt<5>, flip rs1_data_in : SInt<32>, flip rs2_data_in : SInt<32>, flip imm : SInt<32>, flip rd_in : UInt<5>, flip func3_in : UInt<3>, flip func7_in : UInt<1>, flip ctrl_MemWr_in : UInt<1>, flip ctrl_Branch_in : UInt<1>, flip ctrl_MemRd_in : UInt<1>, flip ctrl_Reg_W_in : UInt<1>, flip ctrl_MemToReg_in : UInt<1>, flip ctrl_AluOp_in : UInt<3>, flip ctrl_OpA_in : UInt<2>, flip ctrl_OpB_in : UInt<1>, flip ctrl_nextpc_in : UInt<2>, flip IFID_pc4_in : UInt<32>, rs1_out : UInt<5>, rs2_out : UInt<5>, rs1_data_out : SInt<32>, rs2_data_out : SInt<32>, rd_out : UInt<5>, imm_out : SInt<32>, func3_out : UInt<3>, func7_out : UInt<1>, ctrl_MemWr_out : UInt<1>, ctrl_Branch_out : UInt<1>, ctrl_MemRd_out : UInt<1>, ctrl_Reg_W_out : UInt<1>, ctrl_MemToReg_out : UInt<1>, ctrl_AluOp_out : UInt<3>, ctrl_OpA_out : UInt<2>, ctrl_OpB_out : UInt<1>, ctrl_nextpc_out : UInt<2>, IFID_pc4_out : UInt<32>}
    
    reg io_rs1_out_REG : UInt, clock @[ID_EX.scala 47:24]
    io_rs1_out_REG <= io.rs1_in @[ID_EX.scala 47:24]
    io.rs1_out <= io_rs1_out_REG @[ID_EX.scala 47:14]
    reg io_rs2_out_REG : UInt, clock @[ID_EX.scala 48:24]
    io_rs2_out_REG <= io.rs2_in @[ID_EX.scala 48:24]
    io.rs2_out <= io_rs2_out_REG @[ID_EX.scala 48:14]
    reg io_rs1_data_out_REG : SInt, clock @[ID_EX.scala 49:29]
    io_rs1_data_out_REG <= io.rs1_data_in @[ID_EX.scala 49:29]
    io.rs1_data_out <= io_rs1_data_out_REG @[ID_EX.scala 49:19]
    reg io_rs2_data_out_REG : SInt, clock @[ID_EX.scala 50:29]
    io_rs2_data_out_REG <= io.rs2_data_in @[ID_EX.scala 50:29]
    io.rs2_data_out <= io_rs2_data_out_REG @[ID_EX.scala 50:19]
    reg io_imm_out_REG : SInt, clock @[ID_EX.scala 51:24]
    io_imm_out_REG <= io.imm @[ID_EX.scala 51:24]
    io.imm_out <= io_imm_out_REG @[ID_EX.scala 51:14]
    reg io_rd_out_REG : UInt, clock @[ID_EX.scala 52:23]
    io_rd_out_REG <= io.rd_in @[ID_EX.scala 52:23]
    io.rd_out <= io_rd_out_REG @[ID_EX.scala 52:13]
    reg io_func3_out_REG : UInt, clock @[ID_EX.scala 53:26]
    io_func3_out_REG <= io.func3_in @[ID_EX.scala 53:26]
    io.func3_out <= io_func3_out_REG @[ID_EX.scala 53:16]
    reg io_func7_out_REG : UInt<1>, clock @[ID_EX.scala 54:26]
    io_func7_out_REG <= io.func7_in @[ID_EX.scala 54:26]
    io.func7_out <= io_func7_out_REG @[ID_EX.scala 54:16]
    reg io_ctrl_MemWr_out_REG : UInt<1>, clock @[ID_EX.scala 55:31]
    io_ctrl_MemWr_out_REG <= io.ctrl_MemWr_in @[ID_EX.scala 55:31]
    io.ctrl_MemWr_out <= io_ctrl_MemWr_out_REG @[ID_EX.scala 55:21]
    reg io_ctrl_Branch_out_REG : UInt<1>, clock @[ID_EX.scala 56:32]
    io_ctrl_Branch_out_REG <= io.ctrl_Branch_in @[ID_EX.scala 56:32]
    io.ctrl_Branch_out <= io_ctrl_Branch_out_REG @[ID_EX.scala 56:22]
    reg io_ctrl_MemRd_out_REG : UInt<1>, clock @[ID_EX.scala 57:35]
    io_ctrl_MemRd_out_REG <= io.ctrl_MemRd_in @[ID_EX.scala 57:35]
    io.ctrl_MemRd_out <= io_ctrl_MemRd_out_REG @[ID_EX.scala 57:25]
    reg io_ctrl_Reg_W_out_REG : UInt<1>, clock @[ID_EX.scala 58:35]
    io_ctrl_Reg_W_out_REG <= io.ctrl_Reg_W_in @[ID_EX.scala 58:35]
    io.ctrl_Reg_W_out <= io_ctrl_Reg_W_out_REG @[ID_EX.scala 58:25]
    reg io_ctrl_MemToReg_out_REG : UInt<1>, clock @[ID_EX.scala 59:35]
    io_ctrl_MemToReg_out_REG <= io.ctrl_MemToReg_in @[ID_EX.scala 59:35]
    io.ctrl_MemToReg_out <= io_ctrl_MemToReg_out_REG @[ID_EX.scala 59:25]
    reg io_ctrl_AluOp_out_REG : UInt, clock @[ID_EX.scala 60:35]
    io_ctrl_AluOp_out_REG <= io.ctrl_AluOp_in @[ID_EX.scala 60:35]
    io.ctrl_AluOp_out <= io_ctrl_AluOp_out_REG @[ID_EX.scala 60:25]
    reg io_ctrl_OpA_out_REG : UInt, clock @[ID_EX.scala 61:35]
    io_ctrl_OpA_out_REG <= io.ctrl_OpA_in @[ID_EX.scala 61:35]
    io.ctrl_OpA_out <= io_ctrl_OpA_out_REG @[ID_EX.scala 61:25]
    reg io_ctrl_OpB_out_REG : UInt<1>, clock @[ID_EX.scala 62:35]
    io_ctrl_OpB_out_REG <= io.ctrl_OpB_in @[ID_EX.scala 62:35]
    io.ctrl_OpB_out <= io_ctrl_OpB_out_REG @[ID_EX.scala 62:25]
    reg io_ctrl_nextpc_out_REG : UInt, clock @[ID_EX.scala 63:35]
    io_ctrl_nextpc_out_REG <= io.ctrl_nextpc_in @[ID_EX.scala 63:35]
    io.ctrl_nextpc_out <= io_ctrl_nextpc_out_REG @[ID_EX.scala 63:25]
    reg io_IFID_pc4_out_REG : UInt, clock @[ID_EX.scala 64:35]
    io_IFID_pc4_out_REG <= io.IFID_pc4_in @[ID_EX.scala 64:35]
    io.IFID_pc4_out <= io_IFID_pc4_out_REG @[ID_EX.scala 64:25]
    
  module EX_MEM : 
    input clock : Clock
    input reset : Reset
    output io : {flip IDEX_MEMRD : UInt<1>, flip IDEX_MEMWR : UInt<1>, flip IDEX_MEMTOREG : UInt<1>, flip IDEX_REG_W : UInt<1>, flip IDEX_rs2 : SInt<32>, flip IDEX_rd : UInt<5>, flip alu_out : SInt<32>, EXMEM_memRd_out : UInt<1>, EXMEM_memWr_out : UInt<1>, EXMEM_memToReg_out : UInt<1>, EXMEM_reg_w_out : UInt<1>, EXMEM_rs2_out : SInt<32>, EXMEM_rd_out : UInt<5>, EXMEM_alu_out : SInt<32>}
    
    reg io_EXMEM_memRd_out_REG : UInt<1>, clock @[EX_MEM.scala 25:32]
    io_EXMEM_memRd_out_REG <= io.IDEX_MEMRD @[EX_MEM.scala 25:32]
    io.EXMEM_memRd_out <= io_EXMEM_memRd_out_REG @[EX_MEM.scala 25:22]
    reg io_EXMEM_memWr_out_REG : UInt<1>, clock @[EX_MEM.scala 26:32]
    io_EXMEM_memWr_out_REG <= io.IDEX_MEMWR @[EX_MEM.scala 26:32]
    io.EXMEM_memWr_out <= io_EXMEM_memWr_out_REG @[EX_MEM.scala 26:22]
    reg io_EXMEM_memToReg_out_REG : UInt<1>, clock @[EX_MEM.scala 27:35]
    io_EXMEM_memToReg_out_REG <= io.IDEX_MEMTOREG @[EX_MEM.scala 27:35]
    io.EXMEM_memToReg_out <= io_EXMEM_memToReg_out_REG @[EX_MEM.scala 27:25]
    reg io_EXMEM_reg_w_out_REG : UInt<1>, clock @[EX_MEM.scala 28:32]
    io_EXMEM_reg_w_out_REG <= io.IDEX_REG_W @[EX_MEM.scala 28:32]
    io.EXMEM_reg_w_out <= io_EXMEM_reg_w_out_REG @[EX_MEM.scala 28:22]
    reg io_EXMEM_rs2_out_REG : SInt, clock @[EX_MEM.scala 29:30]
    io_EXMEM_rs2_out_REG <= io.IDEX_rs2 @[EX_MEM.scala 29:30]
    io.EXMEM_rs2_out <= io_EXMEM_rs2_out_REG @[EX_MEM.scala 29:20]
    reg io_EXMEM_rd_out_REG : UInt, clock @[EX_MEM.scala 30:29]
    io_EXMEM_rd_out_REG <= io.IDEX_rd @[EX_MEM.scala 30:29]
    io.EXMEM_rd_out <= io_EXMEM_rd_out_REG @[EX_MEM.scala 30:19]
    reg io_EXMEM_alu_out_REG : SInt, clock @[EX_MEM.scala 31:30]
    io_EXMEM_alu_out_REG <= io.alu_out @[EX_MEM.scala 31:30]
    io.EXMEM_alu_out <= io_EXMEM_alu_out_REG @[EX_MEM.scala 31:20]
    
  module MEM_WB : 
    input clock : Clock
    input reset : Reset
    output io : {flip EXMEM_MEMTOREG : UInt<1>, flip EXMEM_REG_W : UInt<1>, flip EXMEM_MEMRD : UInt<1>, flip EXMEM_rd : UInt<5>, flip in_dataMem_out : SInt<32>, flip in_alu_out : SInt<32>, MEMWB_memToReg_out : UInt<1>, MEMWB_reg_w_out : UInt<1>, MEMWB_memRd_out : UInt<1>, MEMWB_rd_out : UInt<5>, MEMWB_dataMem_out : SInt<32>, MEMWB_alu_out : SInt<32>}
    
    reg io_MEMWB_memToReg_out_REG : UInt<1>, clock @[MEM_WB.scala 24:35]
    io_MEMWB_memToReg_out_REG <= io.EXMEM_MEMTOREG @[MEM_WB.scala 24:35]
    io.MEMWB_memToReg_out <= io_MEMWB_memToReg_out_REG @[MEM_WB.scala 24:25]
    reg io_MEMWB_reg_w_out_REG : UInt<1>, clock @[MEM_WB.scala 25:32]
    io_MEMWB_reg_w_out_REG <= io.EXMEM_REG_W @[MEM_WB.scala 25:32]
    io.MEMWB_reg_w_out <= io_MEMWB_reg_w_out_REG @[MEM_WB.scala 25:22]
    reg io_MEMWB_memRd_out_REG : UInt<1>, clock @[MEM_WB.scala 26:32]
    io_MEMWB_memRd_out_REG <= io.EXMEM_MEMRD @[MEM_WB.scala 26:32]
    io.MEMWB_memRd_out <= io_MEMWB_memRd_out_REG @[MEM_WB.scala 26:22]
    reg io_MEMWB_rd_out_REG : UInt, clock @[MEM_WB.scala 27:29]
    io_MEMWB_rd_out_REG <= io.EXMEM_rd @[MEM_WB.scala 27:29]
    io.MEMWB_rd_out <= io_MEMWB_rd_out_REG @[MEM_WB.scala 27:19]
    reg io_MEMWB_dataMem_out_REG : SInt, clock @[MEM_WB.scala 28:34]
    io_MEMWB_dataMem_out_REG <= io.in_dataMem_out @[MEM_WB.scala 28:34]
    io.MEMWB_dataMem_out <= io_MEMWB_dataMem_out_REG @[MEM_WB.scala 28:24]
    reg io_MEMWB_alu_out_REG : SInt, clock @[MEM_WB.scala 29:30]
    io_MEMWB_alu_out_REG <= io.in_alu_out @[MEM_WB.scala 29:30]
    io.MEMWB_alu_out <= io_MEMWB_alu_out_REG @[MEM_WB.scala 29:20]
    
  module Forwarding : 
    input clock : Clock
    input reset : Reset
    output io : {flip IDEX_rs1 : UInt<5>, flip IDEX_rs2 : UInt<5>, flip EXMEM_rd : UInt<5>, flip EXMEM_regWr : UInt<1>, flip MEMWB_rd : UInt<5>, flip MEMWB_regWr : UInt<1>, forward_a : UInt<2>, forward_b : UInt<2>}
    
    io.forward_a <= UInt<1>("h00") @[FORWARDdata.scala 19:14]
    io.forward_b <= UInt<1>("h00") @[FORWARDdata.scala 20:14]
    node _T = eq(io.EXMEM_regWr, UInt<1>("h01")) @[FORWARDdata.scala 23:21]
    node _T_1 = neq(io.EXMEM_rd, UInt<1>("h00")) @[FORWARDdata.scala 23:47]
    node _T_2 = and(_T, _T_1) @[FORWARDdata.scala 23:32]
    node _T_3 = eq(io.EXMEM_rd, io.IDEX_rs1) @[FORWARDdata.scala 24:22]
    node _T_4 = and(_T_2, _T_3) @[FORWARDdata.scala 23:62]
    node _T_5 = eq(io.EXMEM_rd, io.IDEX_rs2) @[FORWARDdata.scala 24:62]
    node _T_6 = and(_T_4, _T_5) @[FORWARDdata.scala 24:46]
    when _T_6 : @[FORWARDdata.scala 24:80]
      io.forward_a <= UInt<2>("h02") @[FORWARDdata.scala 25:18]
      io.forward_b <= UInt<2>("h02") @[FORWARDdata.scala 26:18]
      skip @[FORWARDdata.scala 24:80]
    else : @[FORWARDdata.scala 29:40]
      node _T_7 = eq(io.EXMEM_regWr, UInt<1>("h01")) @[FORWARDdata.scala 28:27]
      node _T_8 = neq(io.EXMEM_rd, UInt<1>("h00")) @[FORWARDdata.scala 28:53]
      node _T_9 = and(_T_7, _T_8) @[FORWARDdata.scala 28:38]
      node _T_10 = eq(io.EXMEM_rd, io.IDEX_rs2) @[FORWARDdata.scala 29:22]
      node _T_11 = and(_T_9, _T_10) @[FORWARDdata.scala 28:68]
      when _T_11 : @[FORWARDdata.scala 29:40]
        io.forward_b <= UInt<2>("h02") @[FORWARDdata.scala 30:18]
        skip @[FORWARDdata.scala 29:40]
      else : @[FORWARDdata.scala 33:40]
        node _T_12 = eq(io.EXMEM_regWr, UInt<1>("h01")) @[FORWARDdata.scala 32:27]
        node _T_13 = neq(io.EXMEM_rd, UInt<1>("h00")) @[FORWARDdata.scala 32:53]
        node _T_14 = and(_T_12, _T_13) @[FORWARDdata.scala 32:38]
        node _T_15 = eq(io.EXMEM_rd, io.IDEX_rs1) @[FORWARDdata.scala 33:22]
        node _T_16 = and(_T_14, _T_15) @[FORWARDdata.scala 32:68]
        when _T_16 : @[FORWARDdata.scala 33:40]
          io.forward_a <= UInt<2>("h02") @[FORWARDdata.scala 34:18]
          skip @[FORWARDdata.scala 33:40]
    node _T_17 = eq(io.MEMWB_regWr, UInt<1>("h01")) @[FORWARDdata.scala 38:22]
    node _T_18 = neq(io.MEMWB_rd, UInt<1>("h00")) @[FORWARDdata.scala 38:50]
    node _T_19 = and(_T_17, _T_18) @[FORWARDdata.scala 38:34]
    node _T_20 = eq(io.MEMWB_rd, io.IDEX_rs1) @[FORWARDdata.scala 38:82]
    node _T_21 = and(_T_19, _T_20) @[FORWARDdata.scala 38:66]
    node _T_22 = eq(io.MEMWB_rd, io.IDEX_rs2) @[FORWARDdata.scala 38:115]
    node _T_23 = and(_T_21, _T_22) @[FORWARDdata.scala 38:99]
    node _T_24 = eq(io.EXMEM_regWr, UInt<1>("h01")) @[FORWARDdata.scala 39:26]
    node _T_25 = neq(io.EXMEM_rd, UInt<1>("h00")) @[FORWARDdata.scala 39:52]
    node _T_26 = and(_T_24, _T_25) @[FORWARDdata.scala 39:37]
    node _T_27 = eq(io.EXMEM_rd, io.IDEX_rs1) @[FORWARDdata.scala 39:83]
    node _T_28 = and(_T_26, _T_27) @[FORWARDdata.scala 39:67]
    node _T_29 = eq(io.EXMEM_rd, io.IDEX_rs2) @[FORWARDdata.scala 39:116]
    node _T_30 = and(_T_28, _T_29) @[FORWARDdata.scala 39:100]
    node _T_31 = not(_T_30) @[FORWARDdata.scala 39:9]
    node _T_32 = and(_T_23, _T_31) @[FORWARDdata.scala 38:132]
    when _T_32 : @[FORWARDdata.scala 39:135]
      io.forward_a <= UInt<1>("h01") @[FORWARDdata.scala 40:18]
      io.forward_b <= UInt<1>("h01") @[FORWARDdata.scala 41:18]
      skip @[FORWARDdata.scala 39:135]
    else : @[FORWARDdata.scala 44:101]
      node _T_33 = eq(io.MEMWB_regWr, UInt<1>("h01")) @[FORWARDdata.scala 43:28]
      node _T_34 = neq(io.MEMWB_rd, UInt<1>("h00")) @[FORWARDdata.scala 43:56]
      node _T_35 = and(_T_33, _T_34) @[FORWARDdata.scala 43:40]
      node _T_36 = eq(io.MEMWB_rd, io.IDEX_rs2) @[FORWARDdata.scala 43:88]
      node _T_37 = and(_T_35, _T_36) @[FORWARDdata.scala 43:72]
      node _T_38 = eq(io.EXMEM_regWr, UInt<1>("h01")) @[FORWARDdata.scala 44:26]
      node _T_39 = neq(io.EXMEM_rd, UInt<1>("h00")) @[FORWARDdata.scala 44:52]
      node _T_40 = and(_T_38, _T_39) @[FORWARDdata.scala 44:37]
      node _T_41 = eq(io.EXMEM_rd, io.IDEX_rs2) @[FORWARDdata.scala 44:83]
      node _T_42 = and(_T_40, _T_41) @[FORWARDdata.scala 44:67]
      node _T_43 = not(_T_42) @[FORWARDdata.scala 44:9]
      node _T_44 = and(_T_37, _T_43) @[FORWARDdata.scala 43:105]
      when _T_44 : @[FORWARDdata.scala 44:101]
        io.forward_b <= UInt<1>("h01") @[FORWARDdata.scala 45:18]
        skip @[FORWARDdata.scala 44:101]
      else : @[FORWARDdata.scala 48:101]
        node _T_45 = eq(io.MEMWB_regWr, UInt<1>("h01")) @[FORWARDdata.scala 47:28]
        node _T_46 = neq(io.MEMWB_rd, UInt<1>("h00")) @[FORWARDdata.scala 47:56]
        node _T_47 = and(_T_45, _T_46) @[FORWARDdata.scala 47:40]
        node _T_48 = eq(io.MEMWB_rd, io.IDEX_rs1) @[FORWARDdata.scala 47:88]
        node _T_49 = and(_T_47, _T_48) @[FORWARDdata.scala 47:72]
        node _T_50 = eq(io.EXMEM_regWr, UInt<1>("h01")) @[FORWARDdata.scala 48:26]
        node _T_51 = neq(io.EXMEM_rd, UInt<1>("h00")) @[FORWARDdata.scala 48:52]
        node _T_52 = and(_T_50, _T_51) @[FORWARDdata.scala 48:37]
        node _T_53 = eq(io.EXMEM_rd, io.IDEX_rs1) @[FORWARDdata.scala 48:83]
        node _T_54 = and(_T_52, _T_53) @[FORWARDdata.scala 48:67]
        node _T_55 = not(_T_54) @[FORWARDdata.scala 48:9]
        node _T_56 = and(_T_49, _T_55) @[FORWARDdata.scala 47:105]
        when _T_56 : @[FORWARDdata.scala 48:101]
          io.forward_a <= UInt<1>("h01") @[FORWARDdata.scala 49:18]
          skip @[FORWARDdata.scala 48:101]
    
  module HazardDetection : 
    input clock : Clock
    input reset : Reset
    output io : {flip IF_ID_inst : UInt<32>, flip ID_EX_memRead : UInt<1>, flip ID_EX_rd : UInt<5>, flip pc_in : SInt<32>, flip current_pc : SInt<32>, inst_forward : UInt<1>, pc_forward : UInt<1>, ctrl_forward : UInt<1>, inst_out : UInt<32>, pc_out : SInt<32>, current_pc_out : SInt<32>}
    
    node Rs1 = bits(io.IF_ID_inst, 19, 15) @[HAZARDdetection.scala 21:24]
    node Rs2 = bits(io.IF_ID_inst, 24, 20) @[HAZARDdetection.scala 22:24]
    node _T = eq(io.ID_EX_memRead, UInt<1>("h01")) @[HAZARDdetection.scala 24:23]
    node _T_1 = eq(io.ID_EX_rd, Rs1) @[HAZARDdetection.scala 24:51]
    node _T_2 = eq(io.ID_EX_rd, Rs2) @[HAZARDdetection.scala 24:76]
    node _T_3 = or(_T_1, _T_2) @[HAZARDdetection.scala 24:60]
    node _T_4 = and(_T, _T_3) @[HAZARDdetection.scala 24:34]
    when _T_4 : @[HAZARDdetection.scala 24:87]
      io.inst_forward <= UInt<1>("h01") @[HAZARDdetection.scala 25:21]
      io.pc_forward <= UInt<1>("h01") @[HAZARDdetection.scala 26:19]
      io.ctrl_forward <= UInt<1>("h01") @[HAZARDdetection.scala 27:21]
      io.inst_out <= io.IF_ID_inst @[HAZARDdetection.scala 28:17]
      io.pc_out <= io.pc_in @[HAZARDdetection.scala 29:15]
      io.current_pc_out <= io.current_pc @[HAZARDdetection.scala 30:23]
      skip @[HAZARDdetection.scala 24:87]
    else : @[HAZARDdetection.scala 32:13]
      io.inst_forward <= UInt<1>("h00") @[HAZARDdetection.scala 33:21]
      io.pc_forward <= UInt<1>("h00") @[HAZARDdetection.scala 34:19]
      io.ctrl_forward <= UInt<1>("h00") @[HAZARDdetection.scala 35:21]
      io.inst_out <= io.IF_ID_inst @[HAZARDdetection.scala 36:17]
      io.pc_out <= io.pc_in @[HAZARDdetection.scala 37:15]
      io.current_pc_out <= io.current_pc @[HAZARDdetection.scala 38:23]
      skip @[HAZARDdetection.scala 32:13]
    
  module BranchForward : 
    input clock : Clock
    input reset : Reset
    output io : {flip ID_EX_RD : UInt<5>, flip EX_MEM_RD : UInt<5>, flip MEM_WB_RD : UInt<5>, flip ID_EX_memRd : UInt<1>, flip EX_MEM_memRd : UInt<1>, flip MEM_WB_memRd : UInt<1>, flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip ctrl_branch : UInt<1>, forward_rs1 : UInt<4>, forward_rs2 : UInt<4>}
    
    io.forward_rs1 <= UInt<1>("h00") @[BRANCHforward.scala 22:16]
    io.forward_rs2 <= UInt<1>("h00") @[BRANCHforward.scala 23:16]
    node _T = eq(io.ctrl_branch, UInt<1>("h01")) @[BRANCHforward.scala 26:21]
    when _T : @[BRANCHforward.scala 26:30]
      node _T_1 = eq(io.ctrl_branch, UInt<1>("h01")) @[BRANCHforward.scala 28:25]
      node _T_2 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BRANCHforward.scala 28:48]
      node _T_3 = and(_T_1, _T_2) @[BRANCHforward.scala 28:33]
      node _T_4 = neq(io.ID_EX_memRd, UInt<1>("h01")) @[BRANCHforward.scala 28:81]
      node _T_5 = and(_T_3, _T_4) @[BRANCHforward.scala 28:63]
      node _T_6 = eq(io.ID_EX_RD, io.rs1) @[BRANCHforward.scala 28:105]
      node _T_7 = and(_T_5, _T_6) @[BRANCHforward.scala 28:89]
      node _T_8 = eq(io.ID_EX_RD, io.rs2) @[BRANCHforward.scala 28:133]
      node _T_9 = and(_T_7, _T_8) @[BRANCHforward.scala 28:117]
      when _T_9 : @[BRANCHforward.scala 28:146]
        io.forward_rs1 <= UInt<1>("h01") @[BRANCHforward.scala 29:24]
        io.forward_rs2 <= UInt<1>("h01") @[BRANCHforward.scala 30:24]
        skip @[BRANCHforward.scala 28:146]
      else : @[BRANCHforward.scala 32:124]
        node _T_10 = eq(io.ctrl_branch, UInt<1>("h01")) @[BRANCHforward.scala 32:31]
        node _T_11 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BRANCHforward.scala 32:54]
        node _T_12 = and(_T_10, _T_11) @[BRANCHforward.scala 32:39]
        node _T_13 = neq(io.ID_EX_memRd, UInt<1>("h01")) @[BRANCHforward.scala 32:87]
        node _T_14 = and(_T_12, _T_13) @[BRANCHforward.scala 32:69]
        node _T_15 = eq(io.ID_EX_RD, io.rs1) @[BRANCHforward.scala 32:111]
        node _T_16 = and(_T_14, _T_15) @[BRANCHforward.scala 32:95]
        when _T_16 : @[BRANCHforward.scala 32:124]
          io.forward_rs1 <= UInt<1>("h01") @[BRANCHforward.scala 33:24]
          skip @[BRANCHforward.scala 32:124]
        else : @[BRANCHforward.scala 35:124]
          node _T_17 = eq(io.ctrl_branch, UInt<1>("h01")) @[BRANCHforward.scala 35:31]
          node _T_18 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BRANCHforward.scala 35:54]
          node _T_19 = and(_T_17, _T_18) @[BRANCHforward.scala 35:39]
          node _T_20 = neq(io.ID_EX_memRd, UInt<1>("h01")) @[BRANCHforward.scala 35:87]
          node _T_21 = and(_T_19, _T_20) @[BRANCHforward.scala 35:69]
          node _T_22 = eq(io.ID_EX_RD, io.rs2) @[BRANCHforward.scala 35:111]
          node _T_23 = and(_T_21, _T_22) @[BRANCHforward.scala 35:95]
          when _T_23 : @[BRANCHforward.scala 35:124]
            io.forward_rs2 <= UInt<1>("h01") @[BRANCHforward.scala 36:24]
            skip @[BRANCHforward.scala 35:124]
      node _T_24 = eq(io.ctrl_branch, UInt<1>("h01")) @[BRANCHforward.scala 40:25]
      node _T_25 = neq(io.EX_MEM_RD, UInt<1>("h00")) @[BRANCHforward.scala 40:49]
      node _T_26 = and(_T_24, _T_25) @[BRANCHforward.scala 40:33]
      node _T_27 = neq(io.EX_MEM_memRd, UInt<1>("h01")) @[BRANCHforward.scala 40:83]
      node _T_28 = and(_T_26, _T_27) @[BRANCHforward.scala 40:64]
      node _T_29 = eq(io.EX_MEM_RD, io.rs1) @[BRANCHforward.scala 40:108]
      node _T_30 = and(_T_28, _T_29) @[BRANCHforward.scala 40:91]
      node _T_31 = eq(io.EX_MEM_RD, io.rs2) @[BRANCHforward.scala 40:137]
      node _T_32 = and(_T_30, _T_31) @[BRANCHforward.scala 40:120]
      node _T_33 = eq(io.ctrl_branch, UInt<1>("h01")) @[BRANCHforward.scala 41:31]
      node _T_34 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BRANCHforward.scala 41:59]
      node _T_35 = and(_T_33, _T_34) @[BRANCHforward.scala 41:43]
      node _T_36 = eq(io.ID_EX_RD, io.rs1) @[BRANCHforward.scala 41:91]
      node _T_37 = and(_T_35, _T_36) @[BRANCHforward.scala 41:75]
      node _T_38 = eq(io.ID_EX_RD, io.rs2) @[BRANCHforward.scala 41:119]
      node _T_39 = and(_T_37, _T_38) @[BRANCHforward.scala 41:103]
      node _T_40 = not(_T_39) @[BRANCHforward.scala 41:13]
      node _T_41 = and(_T_32, _T_40) @[BRANCHforward.scala 40:149]
      when _T_41 : @[BRANCHforward.scala 41:133]
        io.forward_rs1 <= UInt<2>("h02") @[BRANCHforward.scala 42:24]
        io.forward_rs2 <= UInt<2>("h02") @[BRANCHforward.scala 43:24]
        skip @[BRANCHforward.scala 41:133]
      else : @[BRANCHforward.scala 46:106]
        node _T_42 = eq(io.ctrl_branch, UInt<1>("h01")) @[BRANCHforward.scala 45:31]
        node _T_43 = neq(io.EX_MEM_RD, UInt<1>("h00")) @[BRANCHforward.scala 45:55]
        node _T_44 = and(_T_42, _T_43) @[BRANCHforward.scala 45:39]
        node _T_45 = neq(io.EX_MEM_memRd, UInt<1>("h01")) @[BRANCHforward.scala 45:89]
        node _T_46 = and(_T_44, _T_45) @[BRANCHforward.scala 45:70]
        node _T_47 = eq(io.EX_MEM_RD, io.rs2) @[BRANCHforward.scala 45:114]
        node _T_48 = and(_T_46, _T_47) @[BRANCHforward.scala 45:97]
        node _T_49 = eq(io.ctrl_branch, UInt<1>("h01")) @[BRANCHforward.scala 46:32]
        node _T_50 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BRANCHforward.scala 46:60]
        node _T_51 = and(_T_49, _T_50) @[BRANCHforward.scala 46:44]
        node _T_52 = eq(io.ID_EX_RD, io.rs2) @[BRANCHforward.scala 46:92]
        node _T_53 = and(_T_51, _T_52) @[BRANCHforward.scala 46:76]
        node _T_54 = not(_T_53) @[BRANCHforward.scala 46:14]
        node _T_55 = and(_T_48, _T_54) @[BRANCHforward.scala 45:126]
        when _T_55 : @[BRANCHforward.scala 46:106]
          io.forward_rs2 <= UInt<2>("h02") @[BRANCHforward.scala 47:24]
          skip @[BRANCHforward.scala 46:106]
        else : @[BRANCHforward.scala 50:105]
          node _T_56 = eq(io.ctrl_branch, UInt<1>("h01")) @[BRANCHforward.scala 49:31]
          node _T_57 = neq(io.EX_MEM_RD, UInt<1>("h00")) @[BRANCHforward.scala 49:55]
          node _T_58 = and(_T_56, _T_57) @[BRANCHforward.scala 49:39]
          node _T_59 = neq(io.EX_MEM_memRd, UInt<1>("h01")) @[BRANCHforward.scala 49:89]
          node _T_60 = and(_T_58, _T_59) @[BRANCHforward.scala 49:70]
          node _T_61 = eq(io.EX_MEM_RD, io.rs1) @[BRANCHforward.scala 49:114]
          node _T_62 = and(_T_60, _T_61) @[BRANCHforward.scala 49:97]
          node _T_63 = eq(io.ctrl_branch, UInt<1>("h01")) @[BRANCHforward.scala 50:31]
          node _T_64 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BRANCHforward.scala 50:59]
          node _T_65 = and(_T_63, _T_64) @[BRANCHforward.scala 50:43]
          node _T_66 = eq(io.ID_EX_RD, io.rs1) @[BRANCHforward.scala 50:91]
          node _T_67 = and(_T_65, _T_66) @[BRANCHforward.scala 50:75]
          node _T_68 = not(_T_67) @[BRANCHforward.scala 50:13]
          node _T_69 = and(_T_62, _T_68) @[BRANCHforward.scala 49:126]
          when _T_69 : @[BRANCHforward.scala 50:105]
            io.forward_rs1 <= UInt<2>("h02") @[BRANCHforward.scala 51:24]
            skip @[BRANCHforward.scala 50:105]
          else : @[BRANCHforward.scala 54:133]
            node _T_70 = eq(io.ctrl_branch, UInt<1>("h01")) @[BRANCHforward.scala 53:31]
            node _T_71 = neq(io.EX_MEM_RD, UInt<1>("h00")) @[BRANCHforward.scala 53:55]
            node _T_72 = and(_T_70, _T_71) @[BRANCHforward.scala 53:39]
            node _T_73 = eq(io.EX_MEM_memRd, UInt<1>("h01")) @[BRANCHforward.scala 53:89]
            node _T_74 = and(_T_72, _T_73) @[BRANCHforward.scala 53:70]
            node _T_75 = eq(io.EX_MEM_RD, io.rs1) @[BRANCHforward.scala 53:114]
            node _T_76 = and(_T_74, _T_75) @[BRANCHforward.scala 53:97]
            node _T_77 = eq(io.EX_MEM_RD, io.rs2) @[BRANCHforward.scala 53:143]
            node _T_78 = and(_T_76, _T_77) @[BRANCHforward.scala 53:126]
            node _T_79 = eq(io.ctrl_branch, UInt<1>("h01")) @[BRANCHforward.scala 54:31]
            node _T_80 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BRANCHforward.scala 54:59]
            node _T_81 = and(_T_79, _T_80) @[BRANCHforward.scala 54:43]
            node _T_82 = eq(io.ID_EX_RD, io.rs1) @[BRANCHforward.scala 54:91]
            node _T_83 = and(_T_81, _T_82) @[BRANCHforward.scala 54:75]
            node _T_84 = eq(io.ID_EX_RD, io.rs2) @[BRANCHforward.scala 54:119]
            node _T_85 = and(_T_83, _T_84) @[BRANCHforward.scala 54:103]
            node _T_86 = not(_T_85) @[BRANCHforward.scala 54:13]
            node _T_87 = and(_T_78, _T_86) @[BRANCHforward.scala 53:155]
            when _T_87 : @[BRANCHforward.scala 54:133]
              io.forward_rs1 <= UInt<3>("h04") @[BRANCHforward.scala 55:24]
              io.forward_rs2 <= UInt<3>("h04") @[BRANCHforward.scala 56:24]
              skip @[BRANCHforward.scala 54:133]
            else : @[BRANCHforward.scala 59:105]
              node _T_88 = eq(io.ctrl_branch, UInt<1>("h01")) @[BRANCHforward.scala 58:31]
              node _T_89 = neq(io.EX_MEM_RD, UInt<1>("h00")) @[BRANCHforward.scala 58:55]
              node _T_90 = and(_T_88, _T_89) @[BRANCHforward.scala 58:39]
              node _T_91 = eq(io.EX_MEM_memRd, UInt<1>("h01")) @[BRANCHforward.scala 58:89]
              node _T_92 = and(_T_90, _T_91) @[BRANCHforward.scala 58:70]
              node _T_93 = eq(io.EX_MEM_RD, io.rs2) @[BRANCHforward.scala 58:114]
              node _T_94 = and(_T_92, _T_93) @[BRANCHforward.scala 58:97]
              node _T_95 = eq(io.ctrl_branch, UInt<1>("h01")) @[BRANCHforward.scala 59:31]
              node _T_96 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BRANCHforward.scala 59:59]
              node _T_97 = and(_T_95, _T_96) @[BRANCHforward.scala 59:43]
              node _T_98 = eq(io.ID_EX_RD, io.rs2) @[BRANCHforward.scala 59:91]
              node _T_99 = and(_T_97, _T_98) @[BRANCHforward.scala 59:75]
              node _T_100 = not(_T_99) @[BRANCHforward.scala 59:13]
              node _T_101 = and(_T_94, _T_100) @[BRANCHforward.scala 58:126]
              when _T_101 : @[BRANCHforward.scala 59:105]
                io.forward_rs2 <= UInt<3>("h04") @[BRANCHforward.scala 60:24]
                skip @[BRANCHforward.scala 59:105]
              else : @[BRANCHforward.scala 63:105]
                node _T_102 = eq(io.ctrl_branch, UInt<1>("h01")) @[BRANCHforward.scala 62:31]
                node _T_103 = neq(io.EX_MEM_RD, UInt<1>("h00")) @[BRANCHforward.scala 62:55]
                node _T_104 = and(_T_102, _T_103) @[BRANCHforward.scala 62:39]
                node _T_105 = eq(io.EX_MEM_memRd, UInt<1>("h01")) @[BRANCHforward.scala 62:89]
                node _T_106 = and(_T_104, _T_105) @[BRANCHforward.scala 62:70]
                node _T_107 = eq(io.EX_MEM_RD, io.rs1) @[BRANCHforward.scala 62:114]
                node _T_108 = and(_T_106, _T_107) @[BRANCHforward.scala 62:97]
                node _T_109 = eq(io.ctrl_branch, UInt<1>("h01")) @[BRANCHforward.scala 63:31]
                node _T_110 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BRANCHforward.scala 63:59]
                node _T_111 = and(_T_109, _T_110) @[BRANCHforward.scala 63:43]
                node _T_112 = eq(io.ID_EX_RD, io.rs1) @[BRANCHforward.scala 63:91]
                node _T_113 = and(_T_111, _T_112) @[BRANCHforward.scala 63:75]
                node _T_114 = not(_T_113) @[BRANCHforward.scala 63:13]
                node _T_115 = and(_T_108, _T_114) @[BRANCHforward.scala 62:126]
                when _T_115 : @[BRANCHforward.scala 63:105]
                  io.forward_rs1 <= UInt<3>("h04") @[BRANCHforward.scala 64:24]
                  skip @[BRANCHforward.scala 63:105]
      node _T_116 = eq(io.ctrl_branch, UInt<1>("h01")) @[BRANCHforward.scala 68:25]
      node _T_117 = neq(io.MEM_WB_RD, UInt<1>("h00")) @[BRANCHforward.scala 68:49]
      node _T_118 = and(_T_116, _T_117) @[BRANCHforward.scala 68:33]
      node _T_119 = neq(io.MEM_WB_memRd, UInt<1>("h01")) @[BRANCHforward.scala 68:83]
      node _T_120 = and(_T_118, _T_119) @[BRANCHforward.scala 68:64]
      node _T_121 = eq(io.MEM_WB_RD, io.rs1) @[BRANCHforward.scala 68:108]
      node _T_122 = and(_T_120, _T_121) @[BRANCHforward.scala 68:91]
      node _T_123 = eq(io.MEM_WB_RD, io.rs2) @[BRANCHforward.scala 68:137]
      node _T_124 = and(_T_122, _T_123) @[BRANCHforward.scala 68:120]
      node _T_125 = eq(io.ctrl_branch, UInt<1>("h01")) @[BRANCHforward.scala 69:31]
      node _T_126 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BRANCHforward.scala 69:59]
      node _T_127 = and(_T_125, _T_126) @[BRANCHforward.scala 69:43]
      node _T_128 = eq(io.ID_EX_RD, io.rs1) @[BRANCHforward.scala 69:91]
      node _T_129 = and(_T_127, _T_128) @[BRANCHforward.scala 69:75]
      node _T_130 = eq(io.ID_EX_RD, io.rs2) @[BRANCHforward.scala 69:119]
      node _T_131 = and(_T_129, _T_130) @[BRANCHforward.scala 69:103]
      node _T_132 = not(_T_131) @[BRANCHforward.scala 69:13]
      node _T_133 = and(_T_124, _T_132) @[BRANCHforward.scala 68:149]
      node _T_134 = eq(io.ctrl_branch, UInt<1>("h01")) @[BRANCHforward.scala 70:31]
      node _T_135 = neq(io.EX_MEM_RD, UInt<1>("h00")) @[BRANCHforward.scala 70:60]
      node _T_136 = and(_T_134, _T_135) @[BRANCHforward.scala 70:43]
      node _T_137 = eq(io.EX_MEM_RD, io.rs1) @[BRANCHforward.scala 70:93]
      node _T_138 = and(_T_136, _T_137) @[BRANCHforward.scala 70:76]
      node _T_139 = eq(io.EX_MEM_RD, io.rs2) @[BRANCHforward.scala 70:122]
      node _T_140 = and(_T_138, _T_139) @[BRANCHforward.scala 70:105]
      node _T_141 = not(_T_140) @[BRANCHforward.scala 70:13]
      node _T_142 = and(_T_133, _T_141) @[BRANCHforward.scala 69:132]
      when _T_142 : @[BRANCHforward.scala 70:136]
        io.forward_rs1 <= UInt<2>("h03") @[BRANCHforward.scala 71:24]
        io.forward_rs2 <= UInt<2>("h03") @[BRANCHforward.scala 72:24]
        skip @[BRANCHforward.scala 70:136]
      else : @[BRANCHforward.scala 76:107]
        node _T_143 = eq(io.ctrl_branch, UInt<1>("h01")) @[BRANCHforward.scala 74:31]
        node _T_144 = neq(io.MEM_WB_RD, UInt<1>("h00")) @[BRANCHforward.scala 74:55]
        node _T_145 = and(_T_143, _T_144) @[BRANCHforward.scala 74:39]
        node _T_146 = neq(io.MEM_WB_memRd, UInt<1>("h01")) @[BRANCHforward.scala 74:89]
        node _T_147 = and(_T_145, _T_146) @[BRANCHforward.scala 74:70]
        node _T_148 = eq(io.MEM_WB_RD, io.rs2) @[BRANCHforward.scala 74:114]
        node _T_149 = and(_T_147, _T_148) @[BRANCHforward.scala 74:97]
        node _T_150 = eq(io.ctrl_branch, UInt<1>("h01")) @[BRANCHforward.scala 75:31]
        node _T_151 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BRANCHforward.scala 75:59]
        node _T_152 = and(_T_150, _T_151) @[BRANCHforward.scala 75:43]
        node _T_153 = eq(io.ID_EX_RD, io.rs2) @[BRANCHforward.scala 75:91]
        node _T_154 = and(_T_152, _T_153) @[BRANCHforward.scala 75:75]
        node _T_155 = not(_T_154) @[BRANCHforward.scala 75:13]
        node _T_156 = and(_T_149, _T_155) @[BRANCHforward.scala 74:126]
        node _T_157 = eq(io.ctrl_branch, UInt<1>("h01")) @[BRANCHforward.scala 76:31]
        node _T_158 = neq(io.EX_MEM_RD, UInt<1>("h00")) @[BRANCHforward.scala 76:60]
        node _T_159 = and(_T_157, _T_158) @[BRANCHforward.scala 76:43]
        node _T_160 = eq(io.EX_MEM_RD, io.rs2) @[BRANCHforward.scala 76:93]
        node _T_161 = and(_T_159, _T_160) @[BRANCHforward.scala 76:76]
        node _T_162 = not(_T_161) @[BRANCHforward.scala 76:13]
        node _T_163 = and(_T_156, _T_162) @[BRANCHforward.scala 75:104]
        when _T_163 : @[BRANCHforward.scala 76:107]
          io.forward_rs2 <= UInt<2>("h03") @[BRANCHforward.scala 77:24]
          skip @[BRANCHforward.scala 76:107]
        else : @[BRANCHforward.scala 81:107]
          node _T_164 = eq(io.ctrl_branch, UInt<1>("h01")) @[BRANCHforward.scala 79:31]
          node _T_165 = neq(io.MEM_WB_RD, UInt<1>("h00")) @[BRANCHforward.scala 79:55]
          node _T_166 = and(_T_164, _T_165) @[BRANCHforward.scala 79:39]
          node _T_167 = neq(io.MEM_WB_memRd, UInt<1>("h01")) @[BRANCHforward.scala 79:89]
          node _T_168 = and(_T_166, _T_167) @[BRANCHforward.scala 79:70]
          node _T_169 = eq(io.MEM_WB_RD, io.rs1) @[BRANCHforward.scala 79:114]
          node _T_170 = and(_T_168, _T_169) @[BRANCHforward.scala 79:97]
          node _T_171 = eq(io.ctrl_branch, UInt<1>("h01")) @[BRANCHforward.scala 80:31]
          node _T_172 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BRANCHforward.scala 80:59]
          node _T_173 = and(_T_171, _T_172) @[BRANCHforward.scala 80:43]
          node _T_174 = eq(io.ID_EX_RD, io.rs1) @[BRANCHforward.scala 80:91]
          node _T_175 = and(_T_173, _T_174) @[BRANCHforward.scala 80:75]
          node _T_176 = not(_T_175) @[BRANCHforward.scala 80:13]
          node _T_177 = and(_T_170, _T_176) @[BRANCHforward.scala 79:126]
          node _T_178 = eq(io.ctrl_branch, UInt<1>("h01")) @[BRANCHforward.scala 81:31]
          node _T_179 = neq(io.EX_MEM_RD, UInt<1>("h00")) @[BRANCHforward.scala 81:60]
          node _T_180 = and(_T_178, _T_179) @[BRANCHforward.scala 81:43]
          node _T_181 = eq(io.EX_MEM_RD, io.rs1) @[BRANCHforward.scala 81:93]
          node _T_182 = and(_T_180, _T_181) @[BRANCHforward.scala 81:76]
          node _T_183 = not(_T_182) @[BRANCHforward.scala 81:13]
          node _T_184 = and(_T_177, _T_183) @[BRANCHforward.scala 80:104]
          when _T_184 : @[BRANCHforward.scala 81:107]
            io.forward_rs1 <= UInt<2>("h03") @[BRANCHforward.scala 82:24]
            skip @[BRANCHforward.scala 81:107]
          else : @[BRANCHforward.scala 86:136]
            node _T_185 = eq(io.ctrl_branch, UInt<1>("h01")) @[BRANCHforward.scala 84:31]
            node _T_186 = neq(io.MEM_WB_RD, UInt<1>("h00")) @[BRANCHforward.scala 84:55]
            node _T_187 = and(_T_185, _T_186) @[BRANCHforward.scala 84:39]
            node _T_188 = eq(io.MEM_WB_memRd, UInt<1>("h01")) @[BRANCHforward.scala 84:89]
            node _T_189 = and(_T_187, _T_188) @[BRANCHforward.scala 84:70]
            node _T_190 = eq(io.MEM_WB_RD, io.rs1) @[BRANCHforward.scala 84:114]
            node _T_191 = and(_T_189, _T_190) @[BRANCHforward.scala 84:97]
            node _T_192 = eq(io.MEM_WB_RD, io.rs2) @[BRANCHforward.scala 84:143]
            node _T_193 = and(_T_191, _T_192) @[BRANCHforward.scala 84:126]
            node _T_194 = eq(io.ctrl_branch, UInt<1>("h01")) @[BRANCHforward.scala 85:31]
            node _T_195 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BRANCHforward.scala 85:59]
            node _T_196 = and(_T_194, _T_195) @[BRANCHforward.scala 85:43]
            node _T_197 = eq(io.ID_EX_RD, io.rs1) @[BRANCHforward.scala 85:91]
            node _T_198 = and(_T_196, _T_197) @[BRANCHforward.scala 85:75]
            node _T_199 = eq(io.ID_EX_RD, io.rs2) @[BRANCHforward.scala 85:119]
            node _T_200 = and(_T_198, _T_199) @[BRANCHforward.scala 85:103]
            node _T_201 = not(_T_200) @[BRANCHforward.scala 85:13]
            node _T_202 = and(_T_193, _T_201) @[BRANCHforward.scala 84:155]
            node _T_203 = eq(io.ctrl_branch, UInt<1>("h01")) @[BRANCHforward.scala 86:31]
            node _T_204 = neq(io.EX_MEM_RD, UInt<1>("h00")) @[BRANCHforward.scala 86:60]
            node _T_205 = and(_T_203, _T_204) @[BRANCHforward.scala 86:43]
            node _T_206 = eq(io.EX_MEM_RD, io.rs1) @[BRANCHforward.scala 86:93]
            node _T_207 = and(_T_205, _T_206) @[BRANCHforward.scala 86:76]
            node _T_208 = eq(io.EX_MEM_RD, io.rs2) @[BRANCHforward.scala 86:122]
            node _T_209 = and(_T_207, _T_208) @[BRANCHforward.scala 86:105]
            node _T_210 = not(_T_209) @[BRANCHforward.scala 86:13]
            node _T_211 = and(_T_202, _T_210) @[BRANCHforward.scala 85:132]
            when _T_211 : @[BRANCHforward.scala 86:136]
              io.forward_rs1 <= UInt<3>("h05") @[BRANCHforward.scala 87:24]
              io.forward_rs2 <= UInt<3>("h05") @[BRANCHforward.scala 88:24]
              skip @[BRANCHforward.scala 86:136]
            else : @[BRANCHforward.scala 92:107]
              node _T_212 = eq(io.ctrl_branch, UInt<1>("h01")) @[BRANCHforward.scala 90:31]
              node _T_213 = neq(io.MEM_WB_RD, UInt<1>("h00")) @[BRANCHforward.scala 90:55]
              node _T_214 = and(_T_212, _T_213) @[BRANCHforward.scala 90:39]
              node _T_215 = eq(io.MEM_WB_memRd, UInt<1>("h01")) @[BRANCHforward.scala 90:89]
              node _T_216 = and(_T_214, _T_215) @[BRANCHforward.scala 90:70]
              node _T_217 = eq(io.MEM_WB_RD, io.rs2) @[BRANCHforward.scala 90:114]
              node _T_218 = and(_T_216, _T_217) @[BRANCHforward.scala 90:97]
              node _T_219 = eq(io.ctrl_branch, UInt<1>("h01")) @[BRANCHforward.scala 91:31]
              node _T_220 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BRANCHforward.scala 91:59]
              node _T_221 = and(_T_219, _T_220) @[BRANCHforward.scala 91:43]
              node _T_222 = eq(io.ID_EX_RD, io.rs2) @[BRANCHforward.scala 91:91]
              node _T_223 = and(_T_221, _T_222) @[BRANCHforward.scala 91:75]
              node _T_224 = not(_T_223) @[BRANCHforward.scala 91:13]
              node _T_225 = and(_T_218, _T_224) @[BRANCHforward.scala 90:126]
              node _T_226 = eq(io.ctrl_branch, UInt<1>("h01")) @[BRANCHforward.scala 92:31]
              node _T_227 = neq(io.EX_MEM_RD, UInt<1>("h00")) @[BRANCHforward.scala 92:60]
              node _T_228 = and(_T_226, _T_227) @[BRANCHforward.scala 92:43]
              node _T_229 = eq(io.EX_MEM_RD, io.rs2) @[BRANCHforward.scala 92:93]
              node _T_230 = and(_T_228, _T_229) @[BRANCHforward.scala 92:76]
              node _T_231 = not(_T_230) @[BRANCHforward.scala 92:13]
              node _T_232 = and(_T_225, _T_231) @[BRANCHforward.scala 91:104]
              when _T_232 : @[BRANCHforward.scala 92:107]
                io.forward_rs2 <= UInt<3>("h05") @[BRANCHforward.scala 93:24]
                skip @[BRANCHforward.scala 92:107]
              else : @[BRANCHforward.scala 97:107]
                node _T_233 = eq(io.ctrl_branch, UInt<1>("h01")) @[BRANCHforward.scala 95:31]
                node _T_234 = neq(io.MEM_WB_RD, UInt<1>("h00")) @[BRANCHforward.scala 95:55]
                node _T_235 = and(_T_233, _T_234) @[BRANCHforward.scala 95:39]
                node _T_236 = eq(io.MEM_WB_memRd, UInt<1>("h01")) @[BRANCHforward.scala 95:89]
                node _T_237 = and(_T_235, _T_236) @[BRANCHforward.scala 95:70]
                node _T_238 = eq(io.MEM_WB_RD, io.rs1) @[BRANCHforward.scala 95:114]
                node _T_239 = and(_T_237, _T_238) @[BRANCHforward.scala 95:97]
                node _T_240 = eq(io.ctrl_branch, UInt<1>("h01")) @[BRANCHforward.scala 96:31]
                node _T_241 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BRANCHforward.scala 96:59]
                node _T_242 = and(_T_240, _T_241) @[BRANCHforward.scala 96:43]
                node _T_243 = eq(io.ID_EX_RD, io.rs1) @[BRANCHforward.scala 96:91]
                node _T_244 = and(_T_242, _T_243) @[BRANCHforward.scala 96:75]
                node _T_245 = not(_T_244) @[BRANCHforward.scala 96:13]
                node _T_246 = and(_T_239, _T_245) @[BRANCHforward.scala 95:126]
                node _T_247 = eq(io.ctrl_branch, UInt<1>("h01")) @[BRANCHforward.scala 97:31]
                node _T_248 = neq(io.EX_MEM_RD, UInt<1>("h00")) @[BRANCHforward.scala 97:60]
                node _T_249 = and(_T_247, _T_248) @[BRANCHforward.scala 97:43]
                node _T_250 = eq(io.EX_MEM_RD, io.rs1) @[BRANCHforward.scala 97:93]
                node _T_251 = and(_T_249, _T_250) @[BRANCHforward.scala 97:76]
                node _T_252 = not(_T_251) @[BRANCHforward.scala 97:13]
                node _T_253 = and(_T_246, _T_252) @[BRANCHforward.scala 96:104]
                when _T_253 : @[BRANCHforward.scala 97:107]
                  io.forward_rs1 <= UInt<3>("h05") @[BRANCHforward.scala 98:24]
                  skip @[BRANCHforward.scala 97:107]
      skip @[BRANCHforward.scala 26:30]
    else : @[BRANCHforward.scala 102:36]
      node _T_254 = eq(io.ctrl_branch, UInt<1>("h00")) @[BRANCHforward.scala 102:27]
      when _T_254 : @[BRANCHforward.scala 102:36]
        node _T_255 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BRANCHforward.scala 104:22]
        node _T_256 = neq(io.ID_EX_memRd, UInt<1>("h01")) @[BRANCHforward.scala 104:55]
        node _T_257 = and(_T_255, _T_256) @[BRANCHforward.scala 104:37]
        node _T_258 = eq(io.ID_EX_RD, io.rs1) @[BRANCHforward.scala 104:79]
        node _T_259 = and(_T_257, _T_258) @[BRANCHforward.scala 104:63]
        when _T_259 : @[BRANCHforward.scala 104:92]
          io.forward_rs1 <= UInt<3>("h06") @[BRANCHforward.scala 105:24]
          skip @[BRANCHforward.scala 104:92]
        node _T_260 = neq(io.EX_MEM_RD, UInt<1>("h00")) @[BRANCHforward.scala 109:23]
        node _T_261 = neq(io.EX_MEM_memRd, UInt<1>("h01")) @[BRANCHforward.scala 109:57]
        node _T_262 = and(_T_260, _T_261) @[BRANCHforward.scala 109:38]
        node _T_263 = eq(io.EX_MEM_RD, io.rs1) @[BRANCHforward.scala 109:82]
        node _T_264 = and(_T_262, _T_263) @[BRANCHforward.scala 109:65]
        node _T_265 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BRANCHforward.scala 110:26]
        node _T_266 = eq(io.ID_EX_RD, io.rs1) @[BRANCHforward.scala 110:58]
        node _T_267 = and(_T_265, _T_266) @[BRANCHforward.scala 110:42]
        node _T_268 = not(_T_267) @[BRANCHforward.scala 110:11]
        node _T_269 = and(_T_264, _T_268) @[BRANCHforward.scala 109:94]
        when _T_269 : @[BRANCHforward.scala 110:72]
          io.forward_rs1 <= UInt<3>("h07") @[BRANCHforward.scala 111:24]
          skip @[BRANCHforward.scala 110:72]
        else : @[BRANCHforward.scala 114:72]
          node _T_270 = neq(io.EX_MEM_RD, UInt<1>("h00")) @[BRANCHforward.scala 113:29]
          node _T_271 = eq(io.EX_MEM_memRd, UInt<1>("h01")) @[BRANCHforward.scala 113:63]
          node _T_272 = and(_T_270, _T_271) @[BRANCHforward.scala 113:44]
          node _T_273 = eq(io.EX_MEM_RD, io.rs1) @[BRANCHforward.scala 113:88]
          node _T_274 = and(_T_272, _T_273) @[BRANCHforward.scala 113:71]
          node _T_275 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BRANCHforward.scala 114:26]
          node _T_276 = eq(io.ID_EX_RD, io.rs1) @[BRANCHforward.scala 114:58]
          node _T_277 = and(_T_275, _T_276) @[BRANCHforward.scala 114:42]
          node _T_278 = not(_T_277) @[BRANCHforward.scala 114:11]
          node _T_279 = and(_T_274, _T_278) @[BRANCHforward.scala 113:100]
          when _T_279 : @[BRANCHforward.scala 114:72]
            io.forward_rs1 <= UInt<4>("h09") @[BRANCHforward.scala 115:24]
            skip @[BRANCHforward.scala 114:72]
        node _T_280 = neq(io.MEM_WB_RD, UInt<1>("h00")) @[BRANCHforward.scala 119:23]
        node _T_281 = neq(io.MEM_WB_memRd, UInt<1>("h01")) @[BRANCHforward.scala 119:57]
        node _T_282 = and(_T_280, _T_281) @[BRANCHforward.scala 119:38]
        node _T_283 = eq(io.MEM_WB_RD, io.rs1) @[BRANCHforward.scala 119:82]
        node _T_284 = and(_T_282, _T_283) @[BRANCHforward.scala 119:65]
        node _T_285 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BRANCHforward.scala 120:26]
        node _T_286 = eq(io.ID_EX_RD, io.rs1) @[BRANCHforward.scala 120:58]
        node _T_287 = and(_T_285, _T_286) @[BRANCHforward.scala 120:42]
        node _T_288 = not(_T_287) @[BRANCHforward.scala 120:11]
        node _T_289 = and(_T_284, _T_288) @[BRANCHforward.scala 119:94]
        node _T_290 = neq(io.EX_MEM_RD, UInt<1>("h00")) @[BRANCHforward.scala 121:27]
        node _T_291 = eq(io.EX_MEM_RD, io.rs1) @[BRANCHforward.scala 121:60]
        node _T_292 = and(_T_290, _T_291) @[BRANCHforward.scala 121:43]
        node _T_293 = not(_T_292) @[BRANCHforward.scala 121:11]
        node _T_294 = and(_T_289, _T_293) @[BRANCHforward.scala 120:71]
        when _T_294 : @[BRANCHforward.scala 121:74]
          io.forward_rs1 <= UInt<4>("h08") @[BRANCHforward.scala 122:24]
          skip @[BRANCHforward.scala 121:74]
        else : @[BRANCHforward.scala 126:74]
          node _T_295 = neq(io.MEM_WB_RD, UInt<1>("h00")) @[BRANCHforward.scala 124:29]
          node _T_296 = eq(io.MEM_WB_memRd, UInt<1>("h01")) @[BRANCHforward.scala 124:63]
          node _T_297 = and(_T_295, _T_296) @[BRANCHforward.scala 124:44]
          node _T_298 = eq(io.MEM_WB_RD, io.rs1) @[BRANCHforward.scala 124:88]
          node _T_299 = and(_T_297, _T_298) @[BRANCHforward.scala 124:71]
          node _T_300 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BRANCHforward.scala 125:26]
          node _T_301 = eq(io.ID_EX_RD, io.rs1) @[BRANCHforward.scala 125:58]
          node _T_302 = and(_T_300, _T_301) @[BRANCHforward.scala 125:42]
          node _T_303 = not(_T_302) @[BRANCHforward.scala 125:11]
          node _T_304 = and(_T_299, _T_303) @[BRANCHforward.scala 124:100]
          node _T_305 = neq(io.EX_MEM_RD, UInt<1>("h00")) @[BRANCHforward.scala 126:27]
          node _T_306 = eq(io.EX_MEM_RD, io.rs1) @[BRANCHforward.scala 126:60]
          node _T_307 = and(_T_305, _T_306) @[BRANCHforward.scala 126:43]
          node _T_308 = not(_T_307) @[BRANCHforward.scala 126:11]
          node _T_309 = and(_T_304, _T_308) @[BRANCHforward.scala 125:71]
          when _T_309 : @[BRANCHforward.scala 126:74]
            io.forward_rs1 <= UInt<4>("h0a") @[BRANCHforward.scala 127:24]
            skip @[BRANCHforward.scala 126:74]
        skip @[BRANCHforward.scala 102:36]
    
  module StructuralHazard : 
    input clock : Clock
    input reset : Reset
    output io : {flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip MEM_WB_regWr : UInt<1>, flip MEM_WB_Rd : UInt<5>, fwd_rs1 : UInt<1>, fwd_rs2 : UInt<1>}
    
    node _T = eq(io.MEM_WB_regWr, UInt<1>("h01")) @[STRUCTURALhazard.scala 16:22]
    node _T_1 = eq(io.MEM_WB_Rd, io.rs1) @[STRUCTURALhazard.scala 16:47]
    node _T_2 = and(_T, _T_1) @[STRUCTURALhazard.scala 16:30]
    when _T_2 : @[STRUCTURALhazard.scala 16:59]
      io.fwd_rs1 <= UInt<1>("h01") @[STRUCTURALhazard.scala 17:16]
      skip @[STRUCTURALhazard.scala 16:59]
    else : @[STRUCTURALhazard.scala 18:13]
      io.fwd_rs1 <= UInt<1>("h00") @[STRUCTURALhazard.scala 19:16]
      skip @[STRUCTURALhazard.scala 18:13]
    node _T_3 = eq(io.MEM_WB_regWr, UInt<1>("h01")) @[STRUCTURALhazard.scala 22:22]
    node _T_4 = eq(io.MEM_WB_Rd, io.rs2) @[STRUCTURALhazard.scala 22:46]
    node _T_5 = and(_T_3, _T_4) @[STRUCTURALhazard.scala 22:30]
    when _T_5 : @[STRUCTURALhazard.scala 22:58]
      io.fwd_rs2 <= UInt<1>("h01") @[STRUCTURALhazard.scala 23:16]
      skip @[STRUCTURALhazard.scala 22:58]
    else : @[STRUCTURALhazard.scala 24:13]
      io.fwd_rs2 <= UInt<1>("h00") @[STRUCTURALhazard.scala 25:16]
      skip @[STRUCTURALhazard.scala 24:13]
    
  module PIPELINE : 
    input clock : Clock
    input reset : UInt<1>
    output io : {out : SInt<4>}
    
    inst PC of PC @[TOP.scala 10:20]
    PC.clock <= clock
    PC.reset <= reset
    inst PC4 of PC4 @[TOP.scala 11:21]
    PC4.clock <= clock
    PC4.reset <= reset
    inst InstMemory of InstMem @[TOP.scala 12:29]
    InstMemory.clock <= clock
    InstMemory.reset <= reset
    inst control_module of Control @[TOP.scala 13:32]
    control_module.clock <= clock
    control_module.reset <= reset
    inst ImmGen of ImmGenerator @[TOP.scala 14:25]
    ImmGen.clock <= clock
    ImmGen.reset <= reset
    inst RegFile of RegisterFile @[TOP.scala 15:25]
    RegFile.clock <= clock
    RegFile.reset <= reset
    inst ALU_Control of AluControl @[TOP.scala 16:29]
    ALU_Control.clock <= clock
    ALU_Control.reset <= reset
    inst ALU of ALU @[TOP.scala 18:21]
    ALU.clock <= clock
    ALU.reset <= reset
    inst Branch_M of Branch @[TOP.scala 20:26]
    Branch_M.clock <= clock
    Branch_M.reset <= reset
    inst DataMemory of DataMem1 @[TOP.scala 22:28]
    DataMemory.clock <= clock
    DataMemory.reset <= reset
    inst JALR of Jalr @[TOP.scala 23:22]
    JALR.clock <= clock
    JALR.reset <= reset
    inst IF_ID_M of IF_ID @[TOP.scala 25:25]
    IF_ID_M.clock <= clock
    IF_ID_M.reset <= reset
    inst ID_EX_M of ID_EX @[TOP.scala 26:25]
    ID_EX_M.clock <= clock
    ID_EX_M.reset <= reset
    inst EX_MEM_M of EX_MEM @[TOP.scala 27:26]
    EX_MEM_M.clock <= clock
    EX_MEM_M.reset <= reset
    inst MEM_WB_M of MEM_WB @[TOP.scala 28:26]
    MEM_WB_M.clock <= clock
    MEM_WB_M.reset <= reset
    inst Forwarding of Forwarding @[TOP.scala 30:28]
    Forwarding.clock <= clock
    Forwarding.reset <= reset
    inst HazardDetect of HazardDetection @[TOP.scala 31:30]
    HazardDetect.clock <= clock
    HazardDetect.reset <= reset
    inst Branch_Forward of BranchForward @[TOP.scala 32:32]
    Branch_Forward.clock <= clock
    Branch_Forward.reset <= reset
    inst Structural of StructuralHazard @[TOP.scala 33:28]
    Structural.clock <= clock
    Structural.reset <= reset
    wire d : SInt<32> @[TOP.scala 35:17]
    node _PC_F_T = asSInt(PC4.io.out) @[TOP.scala 39:29]
    node _PC_F_T_1 = eq(UInt<1>("h01"), HazardDetect.io.pc_forward) @[Mux.scala 80:60]
    node PC_F = mux(_PC_F_T_1, HazardDetect.io.pc_out, _PC_F_T) @[Mux.scala 80:57]
    PC.io.in <= PC_F @[TOP.scala 42:14]
    node _PC4_io_pc_T = asUInt(PC.io.out) @[TOP.scala 43:28]
    PC4.io.pc <= _PC4_io_pc_T @[TOP.scala 43:15]
    node _InstMemory_io_addr_T = bits(PC.io.out, 21, 2) @[TOP.scala 44:36]
    InstMemory.io.addr <= _InstMemory_io_addr_T @[TOP.scala 44:24]
    node _PC_for_T = eq(UInt<1>("h01"), HazardDetect.io.inst_forward) @[Mux.scala 80:60]
    node PC_for = mux(_PC_for_T, HazardDetect.io.current_pc_out, PC.io.out) @[Mux.scala 80:57]
    node _Instruction_F_T = eq(UInt<1>("h01"), HazardDetect.io.inst_forward) @[Mux.scala 80:60]
    node Instruction_F = mux(_Instruction_F_T, HazardDetect.io.inst_out, InstMemory.io.data) @[Mux.scala 80:57]
    IF_ID_M.io.pc_in <= PC.io.out @[TOP.scala 56:22]
    IF_ID_M.io.pc4_in <= PC4.io.out @[TOP.scala 57:23]
    IF_ID_M.io.mux_f_pc_in <= PC_for @[TOP.scala 58:28]
    IF_ID_M.io.mux_g_inst_in <= Instruction_F @[TOP.scala 59:30]
    node _ImmGen_io_pc_T = asUInt(IF_ID_M.io.mux_f_pc_out) @[TOP.scala 62:45]
    ImmGen.io.pc <= _ImmGen_io_pc_T @[TOP.scala 62:18]
    node _control_module_io_opcode_T = bits(IF_ID_M.io.mux_g_inst_out, 6, 0) @[TOP.scala 63:58]
    control_module.io.opcode <= _control_module_io_opcode_T @[TOP.scala 63:30]
    node _RegFile_io_rs1_T = eq(control_module.io.opcode, UInt<6>("h033")) @[TOP.scala 65:30]
    node _RegFile_io_rs1_T_1 = eq(control_module.io.opcode, UInt<5>("h013")) @[TOP.scala 66:30]
    node _RegFile_io_rs1_T_2 = or(_RegFile_io_rs1_T, _RegFile_io_rs1_T_1) @[TOP.scala 65:39]
    node _RegFile_io_rs1_T_3 = eq(control_module.io.opcode, UInt<6>("h023")) @[TOP.scala 67:30]
    node _RegFile_io_rs1_T_4 = or(_RegFile_io_rs1_T_2, _RegFile_io_rs1_T_3) @[TOP.scala 66:39]
    node _RegFile_io_rs1_T_5 = eq(control_module.io.opcode, UInt<2>("h03")) @[TOP.scala 68:30]
    node _RegFile_io_rs1_T_6 = or(_RegFile_io_rs1_T_4, _RegFile_io_rs1_T_5) @[TOP.scala 67:39]
    node _RegFile_io_rs1_T_7 = eq(control_module.io.opcode, UInt<7>("h063")) @[TOP.scala 69:30]
    node _RegFile_io_rs1_T_8 = or(_RegFile_io_rs1_T_6, _RegFile_io_rs1_T_7) @[TOP.scala 68:38]
    node _RegFile_io_rs1_T_9 = eq(control_module.io.opcode, UInt<7>("h067")) @[TOP.scala 70:30]
    node _RegFile_io_rs1_T_10 = or(_RegFile_io_rs1_T_8, _RegFile_io_rs1_T_9) @[TOP.scala 69:39]
    node _RegFile_io_rs1_T_11 = bits(IF_ID_M.io.mux_g_inst_out, 19, 15) @[TOP.scala 71:30]
    node _RegFile_io_rs1_T_12 = mux(_RegFile_io_rs1_T_10, _RegFile_io_rs1_T_11, UInt<1>("h00")) @[TOP.scala 64:26]
    RegFile.io.rs1 <= _RegFile_io_rs1_T_12 @[TOP.scala 64:20]
    node _RegFile_io_rs2_T = eq(control_module.io.opcode, UInt<6>("h033")) @[TOP.scala 73:30]
    node _RegFile_io_rs2_T_1 = eq(control_module.io.opcode, UInt<6>("h023")) @[TOP.scala 74:30]
    node _RegFile_io_rs2_T_2 = or(_RegFile_io_rs2_T, _RegFile_io_rs2_T_1) @[TOP.scala 73:39]
    node _RegFile_io_rs2_T_3 = eq(control_module.io.opcode, UInt<7>("h063")) @[TOP.scala 75:30]
    node _RegFile_io_rs2_T_4 = or(_RegFile_io_rs2_T_2, _RegFile_io_rs2_T_3) @[TOP.scala 74:39]
    node _RegFile_io_rs2_T_5 = bits(IF_ID_M.io.mux_g_inst_out, 24, 20) @[TOP.scala 76:31]
    node _RegFile_io_rs2_T_6 = mux(_RegFile_io_rs2_T_4, _RegFile_io_rs2_T_5, UInt<1>("h00")) @[TOP.scala 72:26]
    RegFile.io.rs2 <= _RegFile_io_rs2_T_6 @[TOP.scala 72:20]
    ImmGen.io.instr <= IF_ID_M.io.mux_g_inst_out @[TOP.scala 78:21]
    RegFile.io.reg_write <= control_module.io.reg_write @[TOP.scala 80:26]
    node _ImmValue_T = eq(UInt<1>("h00"), control_module.io.extend) @[Mux.scala 80:60]
    node _ImmValue_T_1 = mux(_ImmValue_T, ImmGen.io.I_type, asSInt(UInt<1>("h00"))) @[Mux.scala 80:57]
    node _ImmValue_T_2 = eq(UInt<1>("h01"), control_module.io.extend) @[Mux.scala 80:60]
    node _ImmValue_T_3 = mux(_ImmValue_T_2, ImmGen.io.S_type, _ImmValue_T_1) @[Mux.scala 80:57]
    node _ImmValue_T_4 = eq(UInt<2>("h02"), control_module.io.extend) @[Mux.scala 80:60]
    node ImmValue = mux(_ImmValue_T_4, ImmGen.io.U_type, _ImmValue_T_3) @[Mux.scala 80:57]
    node _Structural_io_rs1_T = bits(IF_ID_M.io.mux_g_inst_out, 19, 15) @[TOP.scala 87:51]
    Structural.io.rs1 <= _Structural_io_rs1_T @[TOP.scala 87:23]
    node _Structural_io_rs2_T = bits(IF_ID_M.io.mux_g_inst_out, 24, 20) @[TOP.scala 88:51]
    Structural.io.rs2 <= _Structural_io_rs2_T @[TOP.scala 88:23]
    Structural.io.MEM_WB_regWr <= MEM_WB_M.io.EXMEM_REG_W @[TOP.scala 89:32]
    Structural.io.MEM_WB_Rd <= MEM_WB_M.io.MEMWB_rd_out @[TOP.scala 90:29]
    node _ID_EX_M_io_rs1_data_in_T = eq(UInt<1>("h01"), Structural.io.fwd_rs1) @[Mux.scala 80:60]
    node _ID_EX_M_io_rs1_data_in_T_1 = mux(_ID_EX_M_io_rs1_data_in_T, RegFile.io.w_data, RegFile.io.rdata1) @[Mux.scala 80:57]
    ID_EX_M.io.rs1_data_in <= _ID_EX_M_io_rs1_data_in_T_1 @[TOP.scala 92:28]
    node _ID_EX_M_io_rs2_data_in_T = eq(UInt<1>("h01"), Structural.io.fwd_rs2) @[Mux.scala 80:60]
    node _ID_EX_M_io_rs2_data_in_T_1 = mux(_ID_EX_M_io_rs2_data_in_T, RegFile.io.w_data, RegFile.io.rdata2) @[Mux.scala 80:57]
    ID_EX_M.io.rs2_data_in <= _ID_EX_M_io_rs2_data_in_T_1 @[TOP.scala 96:28]
    node _T = eq(HazardDetect.io.ctrl_forward, UInt<1>("h01")) @[TOP.scala 100:39]
    when _T : @[TOP.scala 100:51]
      ID_EX_M.io.ctrl_MemWr_in <= UInt<1>("h00") @[TOP.scala 101:34]
      ID_EX_M.io.ctrl_MemRd_in <= UInt<1>("h00") @[TOP.scala 102:34]
      ID_EX_M.io.ctrl_MemToReg_in <= UInt<1>("h00") @[TOP.scala 103:37]
      ID_EX_M.io.ctrl_Reg_W_in <= UInt<1>("h00") @[TOP.scala 104:34]
      ID_EX_M.io.ctrl_AluOp_in <= UInt<1>("h00") @[TOP.scala 105:34]
      ID_EX_M.io.ctrl_OpB_in <= UInt<1>("h00") @[TOP.scala 106:32]
      ID_EX_M.io.ctrl_Branch_in <= UInt<1>("h00") @[TOP.scala 107:35]
      ID_EX_M.io.ctrl_nextpc_in <= UInt<1>("h00") @[TOP.scala 108:35]
      skip @[TOP.scala 100:51]
    else : @[TOP.scala 109:17]
      ID_EX_M.io.ctrl_MemWr_in <= control_module.io.mem_write @[TOP.scala 110:34]
      ID_EX_M.io.ctrl_MemRd_in <= control_module.io.mem_read @[TOP.scala 111:34]
      ID_EX_M.io.ctrl_MemToReg_in <= control_module.io.men_to_reg @[TOP.scala 112:37]
      ID_EX_M.io.ctrl_Reg_W_in <= control_module.io.reg_write @[TOP.scala 113:34]
      ID_EX_M.io.ctrl_AluOp_in <= control_module.io.alu_operation @[TOP.scala 114:34]
      ID_EX_M.io.ctrl_OpB_in <= control_module.io.operand_B @[TOP.scala 115:32]
      ID_EX_M.io.ctrl_Branch_in <= control_module.io.branch @[TOP.scala 116:35]
      ID_EX_M.io.ctrl_nextpc_in <= control_module.io.next_pc_sel @[TOP.scala 117:35]
      skip @[TOP.scala 109:17]
    HazardDetect.io.IF_ID_inst <= IF_ID_M.io.mux_g_inst_out @[TOP.scala 120:32]
    HazardDetect.io.ID_EX_memRead <= ID_EX_M.io.ctrl_MemRd_out @[TOP.scala 121:35]
    HazardDetect.io.ID_EX_rd <= ID_EX_M.io.rd_out @[TOP.scala 122:30]
    node _HazardDetect_io_pc_in_T = asSInt(IF_ID_M.io.pc4_out) @[TOP.scala 123:49]
    HazardDetect.io.pc_in <= _HazardDetect_io_pc_in_T @[TOP.scala 123:27]
    HazardDetect.io.current_pc <= IF_ID_M.io.mux_f_pc_out @[TOP.scala 124:32]
    MEM_WB_M.io.EXMEM_MEMRD <= EX_MEM_M.io.EXMEM_memRd_out @[TOP.scala 126:29]
    Branch_Forward.io.ID_EX_RD <= ID_EX_M.io.rd_out @[TOP.scala 128:32]
    Branch_Forward.io.EX_MEM_RD <= EX_MEM_M.io.EXMEM_rd_out @[TOP.scala 129:33]
    Branch_Forward.io.MEM_WB_RD <= MEM_WB_M.io.MEMWB_rd_out @[TOP.scala 130:33]
    Branch_Forward.io.ID_EX_memRd <= ID_EX_M.io.ctrl_MemRd_out @[TOP.scala 131:35]
    Branch_Forward.io.EX_MEM_memRd <= EX_MEM_M.io.EXMEM_memRd_out @[TOP.scala 132:36]
    Branch_Forward.io.MEM_WB_memRd <= MEM_WB_M.io.MEMWB_memRd_out @[TOP.scala 133:36]
    node _Branch_Forward_io_rs1_T = bits(IF_ID_M.io.mux_g_inst_out, 19, 15) @[TOP.scala 134:55]
    Branch_Forward.io.rs1 <= _Branch_Forward_io_rs1_T @[TOP.scala 134:27]
    node _Branch_Forward_io_rs2_T = bits(IF_ID_M.io.mux_g_inst_out, 24, 20) @[TOP.scala 135:55]
    Branch_Forward.io.rs2 <= _Branch_Forward_io_rs2_T @[TOP.scala 135:27]
    Branch_Forward.io.ctrl_branch <= control_module.io.branch @[TOP.scala 136:35]
    node _Branch_M_io_arg_x_T = eq(UInt<1>("h00"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _Branch_M_io_arg_x_T_1 = mux(_Branch_M_io_arg_x_T, RegFile.io.rdata1, asSInt(UInt<1>("h00"))) @[Mux.scala 80:57]
    node _Branch_M_io_arg_x_T_2 = eq(UInt<1>("h01"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _Branch_M_io_arg_x_T_3 = mux(_Branch_M_io_arg_x_T_2, ALU.io.out, _Branch_M_io_arg_x_T_1) @[Mux.scala 80:57]
    node _Branch_M_io_arg_x_T_4 = eq(UInt<2>("h02"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _Branch_M_io_arg_x_T_5 = mux(_Branch_M_io_arg_x_T_4, EX_MEM_M.io.EXMEM_alu_out, _Branch_M_io_arg_x_T_3) @[Mux.scala 80:57]
    node _Branch_M_io_arg_x_T_6 = eq(UInt<2>("h03"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _Branch_M_io_arg_x_T_7 = mux(_Branch_M_io_arg_x_T_6, RegFile.io.w_data, _Branch_M_io_arg_x_T_5) @[Mux.scala 80:57]
    node _Branch_M_io_arg_x_T_8 = eq(UInt<3>("h04"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _Branch_M_io_arg_x_T_9 = mux(_Branch_M_io_arg_x_T_8, DataMemory.io.dataOut, _Branch_M_io_arg_x_T_7) @[Mux.scala 80:57]
    node _Branch_M_io_arg_x_T_10 = eq(UInt<3>("h05"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _Branch_M_io_arg_x_T_11 = mux(_Branch_M_io_arg_x_T_10, RegFile.io.w_data, _Branch_M_io_arg_x_T_9) @[Mux.scala 80:57]
    node _Branch_M_io_arg_x_T_12 = eq(UInt<3>("h06"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _Branch_M_io_arg_x_T_13 = mux(_Branch_M_io_arg_x_T_12, RegFile.io.rdata1, _Branch_M_io_arg_x_T_11) @[Mux.scala 80:57]
    node _Branch_M_io_arg_x_T_14 = eq(UInt<3>("h07"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _Branch_M_io_arg_x_T_15 = mux(_Branch_M_io_arg_x_T_14, RegFile.io.rdata1, _Branch_M_io_arg_x_T_13) @[Mux.scala 80:57]
    node _Branch_M_io_arg_x_T_16 = eq(UInt<4>("h08"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _Branch_M_io_arg_x_T_17 = mux(_Branch_M_io_arg_x_T_16, RegFile.io.rdata1, _Branch_M_io_arg_x_T_15) @[Mux.scala 80:57]
    node _Branch_M_io_arg_x_T_18 = eq(UInt<4>("h09"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _Branch_M_io_arg_x_T_19 = mux(_Branch_M_io_arg_x_T_18, RegFile.io.rdata1, _Branch_M_io_arg_x_T_17) @[Mux.scala 80:57]
    node _Branch_M_io_arg_x_T_20 = eq(UInt<4>("h0a"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _Branch_M_io_arg_x_T_21 = mux(_Branch_M_io_arg_x_T_20, RegFile.io.rdata1, _Branch_M_io_arg_x_T_19) @[Mux.scala 80:57]
    Branch_M.io.arg_x <= _Branch_M_io_arg_x_T_21 @[TOP.scala 138:23]
    node _JALR_io_rdata1_T = asUInt(RegFile.io.rdata1) @[TOP.scala 153:36]
    node _JALR_io_rdata1_T_1 = asUInt(RegFile.io.rdata1) @[TOP.scala 154:36]
    node _JALR_io_rdata1_T_2 = asUInt(RegFile.io.rdata1) @[TOP.scala 155:36]
    node _JALR_io_rdata1_T_3 = asUInt(RegFile.io.rdata1) @[TOP.scala 156:36]
    node _JALR_io_rdata1_T_4 = asUInt(RegFile.io.rdata1) @[TOP.scala 157:36]
    node _JALR_io_rdata1_T_5 = asUInt(RegFile.io.rdata1) @[TOP.scala 158:36]
    node _JALR_io_rdata1_T_6 = asUInt(ALU.io.out) @[TOP.scala 159:29]
    node _JALR_io_rdata1_T_7 = asUInt(EX_MEM_M.io.EXMEM_alu_out) @[TOP.scala 160:44]
    node _JALR_io_rdata1_T_8 = asUInt(RegFile.io.w_data) @[TOP.scala 161:36]
    node _JALR_io_rdata1_T_9 = asUInt(DataMemory.io.dataOut) @[TOP.scala 162:40]
    node _JALR_io_rdata1_T_10 = asUInt(RegFile.io.w_data) @[TOP.scala 163:37]
    node _JALR_io_rdata1_T_11 = eq(UInt<1>("h00"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _JALR_io_rdata1_T_12 = mux(_JALR_io_rdata1_T_11, _JALR_io_rdata1_T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _JALR_io_rdata1_T_13 = eq(UInt<1>("h01"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _JALR_io_rdata1_T_14 = mux(_JALR_io_rdata1_T_13, _JALR_io_rdata1_T_1, _JALR_io_rdata1_T_12) @[Mux.scala 80:57]
    node _JALR_io_rdata1_T_15 = eq(UInt<2>("h02"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _JALR_io_rdata1_T_16 = mux(_JALR_io_rdata1_T_15, _JALR_io_rdata1_T_2, _JALR_io_rdata1_T_14) @[Mux.scala 80:57]
    node _JALR_io_rdata1_T_17 = eq(UInt<2>("h03"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _JALR_io_rdata1_T_18 = mux(_JALR_io_rdata1_T_17, _JALR_io_rdata1_T_3, _JALR_io_rdata1_T_16) @[Mux.scala 80:57]
    node _JALR_io_rdata1_T_19 = eq(UInt<3>("h04"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _JALR_io_rdata1_T_20 = mux(_JALR_io_rdata1_T_19, _JALR_io_rdata1_T_4, _JALR_io_rdata1_T_18) @[Mux.scala 80:57]
    node _JALR_io_rdata1_T_21 = eq(UInt<3>("h05"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _JALR_io_rdata1_T_22 = mux(_JALR_io_rdata1_T_21, _JALR_io_rdata1_T_5, _JALR_io_rdata1_T_20) @[Mux.scala 80:57]
    node _JALR_io_rdata1_T_23 = eq(UInt<3>("h06"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _JALR_io_rdata1_T_24 = mux(_JALR_io_rdata1_T_23, _JALR_io_rdata1_T_6, _JALR_io_rdata1_T_22) @[Mux.scala 80:57]
    node _JALR_io_rdata1_T_25 = eq(UInt<3>("h07"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _JALR_io_rdata1_T_26 = mux(_JALR_io_rdata1_T_25, _JALR_io_rdata1_T_7, _JALR_io_rdata1_T_24) @[Mux.scala 80:57]
    node _JALR_io_rdata1_T_27 = eq(UInt<4>("h08"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _JALR_io_rdata1_T_28 = mux(_JALR_io_rdata1_T_27, _JALR_io_rdata1_T_8, _JALR_io_rdata1_T_26) @[Mux.scala 80:57]
    node _JALR_io_rdata1_T_29 = eq(UInt<4>("h09"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _JALR_io_rdata1_T_30 = mux(_JALR_io_rdata1_T_29, _JALR_io_rdata1_T_9, _JALR_io_rdata1_T_28) @[Mux.scala 80:57]
    node _JALR_io_rdata1_T_31 = eq(UInt<4>("h0a"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _JALR_io_rdata1_T_32 = mux(_JALR_io_rdata1_T_31, _JALR_io_rdata1_T_10, _JALR_io_rdata1_T_30) @[Mux.scala 80:57]
    JALR.io.rdata1 <= _JALR_io_rdata1_T_32 @[TOP.scala 152:20]
    node _JALR_io_imme_T = asUInt(ImmValue) @[TOP.scala 165:30]
    JALR.io.imme <= _JALR_io_imme_T @[TOP.scala 165:18]
    node _Branch_M_io_arg_y_T = eq(UInt<1>("h00"), Branch_Forward.io.forward_rs2) @[Mux.scala 80:60]
    node _Branch_M_io_arg_y_T_1 = mux(_Branch_M_io_arg_y_T, RegFile.io.rdata2, asSInt(UInt<1>("h00"))) @[Mux.scala 80:57]
    node _Branch_M_io_arg_y_T_2 = eq(UInt<1>("h01"), Branch_Forward.io.forward_rs2) @[Mux.scala 80:60]
    node _Branch_M_io_arg_y_T_3 = mux(_Branch_M_io_arg_y_T_2, ALU.io.out, _Branch_M_io_arg_y_T_1) @[Mux.scala 80:57]
    node _Branch_M_io_arg_y_T_4 = eq(UInt<2>("h02"), Branch_Forward.io.forward_rs2) @[Mux.scala 80:60]
    node _Branch_M_io_arg_y_T_5 = mux(_Branch_M_io_arg_y_T_4, EX_MEM_M.io.EXMEM_alu_out, _Branch_M_io_arg_y_T_3) @[Mux.scala 80:57]
    node _Branch_M_io_arg_y_T_6 = eq(UInt<2>("h03"), Branch_Forward.io.forward_rs2) @[Mux.scala 80:60]
    node _Branch_M_io_arg_y_T_7 = mux(_Branch_M_io_arg_y_T_6, RegFile.io.w_data, _Branch_M_io_arg_y_T_5) @[Mux.scala 80:57]
    node _Branch_M_io_arg_y_T_8 = eq(UInt<3>("h04"), Branch_Forward.io.forward_rs2) @[Mux.scala 80:60]
    node _Branch_M_io_arg_y_T_9 = mux(_Branch_M_io_arg_y_T_8, DataMemory.io.dataOut, _Branch_M_io_arg_y_T_7) @[Mux.scala 80:57]
    node _Branch_M_io_arg_y_T_10 = eq(UInt<3>("h05"), Branch_Forward.io.forward_rs2) @[Mux.scala 80:60]
    node _Branch_M_io_arg_y_T_11 = mux(_Branch_M_io_arg_y_T_10, RegFile.io.w_data, _Branch_M_io_arg_y_T_9) @[Mux.scala 80:57]
    Branch_M.io.arg_y <= _Branch_M_io_arg_y_T_11 @[TOP.scala 167:23]
    node _Branch_M_io_fnct3_T = bits(IF_ID_M.io.mux_g_inst_out, 14, 12) @[TOP.scala 175:51]
    Branch_M.io.fnct3 <= _Branch_M_io_fnct3_T @[TOP.scala 175:23]
    Branch_M.io.branch <= control_module.io.branch @[TOP.scala 176:24]
    node _T_1 = eq(HazardDetect.io.pc_forward, UInt<1>("h01")) @[TOP.scala 178:37]
    when _T_1 : @[TOP.scala 178:46]
      PC.io.in <= HazardDetect.io.pc_out @[TOP.scala 179:18]
      skip @[TOP.scala 178:46]
    else : @[TOP.scala 180:17]
      node _T_2 = eq(control_module.io.next_pc_sel, UInt<1>("h01")) @[TOP.scala 181:44]
      when _T_2 : @[TOP.scala 181:57]
        node _T_3 = eq(Branch_M.io.br_taken, UInt<1>("h01")) @[TOP.scala 182:39]
        node _T_4 = eq(control_module.io.branch, UInt<1>("h01")) @[TOP.scala 182:75]
        node _T_5 = and(_T_3, _T_4) @[TOP.scala 182:47]
        when _T_5 : @[TOP.scala 182:84]
          PC.io.in <= ImmGen.io.SB_type @[TOP.scala 183:26]
          IF_ID_M.io.pc_in <= asSInt(UInt<1>("h00")) @[TOP.scala 184:34]
          IF_ID_M.io.pc4_in <= UInt<1>("h00") @[TOP.scala 185:35]
          IF_ID_M.io.mux_f_pc_in <= asSInt(UInt<1>("h00")) @[TOP.scala 186:40]
          IF_ID_M.io.mux_g_inst_in <= UInt<1>("h00") @[TOP.scala 187:42]
          skip @[TOP.scala 182:84]
        else : @[TOP.scala 188:25]
          node _PC_io_in_T = asSInt(PC4.io.out) @[TOP.scala 189:40]
          PC.io.in <= _PC_io_in_T @[TOP.scala 189:26]
          skip @[TOP.scala 188:25]
        skip @[TOP.scala 181:57]
      else : @[TOP.scala 191:63]
        node _T_6 = eq(control_module.io.next_pc_sel, UInt<2>("h02")) @[TOP.scala 191:50]
        when _T_6 : @[TOP.scala 191:63]
          PC.io.in <= ImmGen.io.UJ_type @[TOP.scala 192:22]
          IF_ID_M.io.pc_in <= asSInt(UInt<1>("h00")) @[TOP.scala 193:30]
          IF_ID_M.io.pc4_in <= UInt<1>("h00") @[TOP.scala 194:31]
          IF_ID_M.io.mux_f_pc_in <= asSInt(UInt<1>("h00")) @[TOP.scala 195:36]
          IF_ID_M.io.mux_g_inst_in <= UInt<1>("h00") @[TOP.scala 196:38]
          skip @[TOP.scala 191:63]
        else : @[TOP.scala 197:63]
          node _T_7 = eq(control_module.io.next_pc_sel, UInt<2>("h03")) @[TOP.scala 197:50]
          when _T_7 : @[TOP.scala 197:63]
            node _PC_io_in_T_1 = asSInt(JALR.io.out) @[TOP.scala 198:37]
            PC.io.in <= _PC_io_in_T_1 @[TOP.scala 198:22]
            IF_ID_M.io.pc_in <= asSInt(UInt<1>("h00")) @[TOP.scala 199:30]
            IF_ID_M.io.pc4_in <= UInt<1>("h00") @[TOP.scala 200:31]
            IF_ID_M.io.mux_f_pc_in <= asSInt(UInt<1>("h00")) @[TOP.scala 201:36]
            IF_ID_M.io.mux_g_inst_in <= UInt<1>("h00") @[TOP.scala 202:38]
            skip @[TOP.scala 197:63]
          else : @[TOP.scala 203:21]
            node _PC_io_in_T_2 = asSInt(PC4.io.out) @[TOP.scala 204:36]
            PC.io.in <= _PC_io_in_T_2 @[TOP.scala 204:22]
            skip @[TOP.scala 203:21]
      skip @[TOP.scala 180:17]
    ID_EX_M.io.rs1_in <= RegFile.io.rs1 @[TOP.scala 210:23]
    ID_EX_M.io.rs2_in <= RegFile.io.rs2 @[TOP.scala 211:23]
    ID_EX_M.io.imm <= ImmValue @[TOP.scala 212:20]
    node _ID_EX_M_io_func3_in_T = bits(IF_ID_M.io.mux_g_inst_out, 14, 12) @[TOP.scala 213:53]
    ID_EX_M.io.func3_in <= _ID_EX_M_io_func3_in_T @[TOP.scala 213:25]
    node _ID_EX_M_io_func7_in_T = bits(IF_ID_M.io.mux_g_inst_out, 30, 30) @[TOP.scala 214:53]
    ID_EX_M.io.func7_in <= _ID_EX_M_io_func7_in_T @[TOP.scala 214:25]
    node _ID_EX_M_io_rd_in_T = bits(IF_ID_M.io.mux_g_inst_out, 11, 7) @[TOP.scala 215:50]
    ID_EX_M.io.rd_in <= _ID_EX_M_io_rd_in_T @[TOP.scala 215:22]
    Forwarding.io.IDEX_rs1 <= ID_EX_M.io.rs1_out @[TOP.scala 219:28]
    Forwarding.io.IDEX_rs2 <= ID_EX_M.io.rs2_out @[TOP.scala 220:28]
    Forwarding.io.EXMEM_rd <= EX_MEM_M.io.EXMEM_rd_out @[TOP.scala 221:28]
    Forwarding.io.EXMEM_regWr <= EX_MEM_M.io.EXMEM_reg_w_out @[TOP.scala 222:31]
    Forwarding.io.MEMWB_rd <= MEM_WB_M.io.MEMWB_rd_out @[TOP.scala 223:28]
    Forwarding.io.MEMWB_regWr <= MEM_WB_M.io.MEMWB_reg_w_out @[TOP.scala 224:31]
    ID_EX_M.io.ctrl_OpA_in <= control_module.io.operand_A @[TOP.scala 226:28]
    ID_EX_M.io.IFID_pc4_in <= IF_ID_M.io.pc4_out @[TOP.scala 227:28]
    node _T_8 = eq(ID_EX_M.io.ctrl_OpA_out, UInt<1>("h01")) @[TOP.scala 229:35]
    when _T_8 : @[TOP.scala 229:48]
      node _ALU_io_in_A_T = asSInt(ID_EX_M.io.IFID_pc4_out) @[TOP.scala 230:48]
      ALU.io.in_A <= _ALU_io_in_A_T @[TOP.scala 230:21]
      skip @[TOP.scala 229:48]
    else : @[TOP.scala 231:17]
      node _T_9 = eq(Forwarding.io.forward_a, UInt<1>("h00")) @[TOP.scala 232:38]
      when _T_9 : @[TOP.scala 232:51]
        ALU.io.in_A <= ID_EX_M.io.rs1_data_out @[TOP.scala 233:25]
        skip @[TOP.scala 232:51]
      else : @[TOP.scala 234:57]
        node _T_10 = eq(Forwarding.io.forward_a, UInt<1>("h01")) @[TOP.scala 234:44]
        when _T_10 : @[TOP.scala 234:57]
          ALU.io.in_A <= d @[TOP.scala 235:25]
          skip @[TOP.scala 234:57]
        else : @[TOP.scala 236:57]
          node _T_11 = eq(Forwarding.io.forward_a, UInt<2>("h02")) @[TOP.scala 236:44]
          when _T_11 : @[TOP.scala 236:57]
            ALU.io.in_A <= EX_MEM_M.io.EXMEM_alu_out @[TOP.scala 237:25]
            skip @[TOP.scala 236:57]
          else : @[TOP.scala 238:21]
            ALU.io.in_A <= ID_EX_M.io.rs1_data_out @[TOP.scala 239:25]
            skip @[TOP.scala 238:21]
      skip @[TOP.scala 231:17]
    node _RS2_value_T = eq(UInt<1>("h00"), Forwarding.io.forward_b) @[Mux.scala 80:60]
    node _RS2_value_T_1 = mux(_RS2_value_T, ID_EX_M.io.rs2_data_out, asSInt(UInt<1>("h00"))) @[Mux.scala 80:57]
    node _RS2_value_T_2 = eq(UInt<1>("h01"), Forwarding.io.forward_b) @[Mux.scala 80:60]
    node _RS2_value_T_3 = mux(_RS2_value_T_2, d, _RS2_value_T_1) @[Mux.scala 80:57]
    node _RS2_value_T_4 = eq(UInt<2>("h02"), Forwarding.io.forward_b) @[Mux.scala 80:60]
    node RS2_value = mux(_RS2_value_T_4, EX_MEM_M.io.EXMEM_alu_out, _RS2_value_T_3) @[Mux.scala 80:57]
    node _ALU_io_in_B_T = eq(UInt<1>("h01"), ID_EX_M.io.ctrl_OpB_out) @[Mux.scala 80:60]
    node _ALU_io_in_B_T_1 = mux(_ALU_io_in_B_T, ID_EX_M.io.imm_out, RS2_value) @[Mux.scala 80:57]
    ALU.io.in_B <= _ALU_io_in_B_T_1 @[TOP.scala 248:17]
    ALU_Control.io.aluOp <= ID_EX_M.io.ctrl_AluOp_out @[TOP.scala 252:26]
    ALU_Control.io.func3 <= ID_EX_M.io.func3_out @[TOP.scala 254:26]
    ALU_Control.io.func7 <= ID_EX_M.io.func7_out @[TOP.scala 255:26]
    EX_MEM_M.io.IDEX_rd <= ID_EX_M.io.rd_out @[TOP.scala 256:25]
    ALU.io.alu_Op <= ALU_Control.io.out @[TOP.scala 257:19]
    EX_MEM_M.io.IDEX_MEMRD <= ID_EX_M.io.ctrl_MemRd_out @[TOP.scala 261:28]
    EX_MEM_M.io.IDEX_MEMWR <= ID_EX_M.io.ctrl_MemWr_out @[TOP.scala 262:28]
    EX_MEM_M.io.IDEX_MEMTOREG <= ID_EX_M.io.ctrl_MemToReg_out @[TOP.scala 263:31]
    EX_MEM_M.io.IDEX_REG_W <= ID_EX_M.io.ctrl_Reg_W_out @[TOP.scala 264:28]
    EX_MEM_M.io.IDEX_rs2 <= RS2_value @[TOP.scala 266:26]
    EX_MEM_M.io.alu_out <= ALU.io.out @[TOP.scala 267:25]
    DataMemory.io.mem_read <= EX_MEM_M.io.EXMEM_memRd_out @[TOP.scala 271:28]
    DataMemory.io.mem_write <= EX_MEM_M.io.EXMEM_memWr_out @[TOP.scala 272:29]
    MEM_WB_M.io.EXMEM_MEMTOREG <= EX_MEM_M.io.EXMEM_memToReg_out @[TOP.scala 273:32]
    MEM_WB_M.io.EXMEM_REG_W <= EX_MEM_M.io.EXMEM_reg_w_out @[TOP.scala 274:29]
    DataMemory.io.dataIn <= EX_MEM_M.io.EXMEM_rs2_out @[TOP.scala 275:26]
    MEM_WB_M.io.EXMEM_rd <= EX_MEM_M.io.EXMEM_rd_out @[TOP.scala 276:26]
    node _DataMemory_io_addr_T = asUInt(EX_MEM_M.io.EXMEM_alu_out) @[TOP.scala 277:53]
    DataMemory.io.addr <= _DataMemory_io_addr_T @[TOP.scala 277:24]
    RegFile.io.w_reg <= MEM_WB_M.io.MEMWB_rd_out @[TOP.scala 279:22]
    RegFile.io.reg_write <= MEM_WB_M.io.MEMWB_reg_w_out @[TOP.scala 280:26]
    MEM_WB_M.io.in_dataMem_out <= DataMemory.io.dataOut @[TOP.scala 284:32]
    MEM_WB_M.io.in_alu_out <= EX_MEM_M.io.EXMEM_alu_out @[TOP.scala 285:28]
    node _d_T = eq(UInt<1>("h01"), MEM_WB_M.io.MEMWB_memToReg_out) @[Mux.scala 80:60]
    node _d_T_1 = mux(_d_T, MEM_WB_M.io.MEMWB_dataMem_out, MEM_WB_M.io.MEMWB_alu_out) @[Mux.scala 80:57]
    d <= _d_T_1 @[TOP.scala 289:7]
    RegFile.io.w_data <= d @[TOP.scala 293:23]
    io.out <= asSInt(UInt<1>("h00")) @[TOP.scala 296:12]
    
